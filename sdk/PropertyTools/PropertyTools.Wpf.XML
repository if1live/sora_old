<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PropertyTools.Wpf</name>
    </assembly>
    <members>
        <member name="T:PropertyTools.Wpf.ColorPicker2">
            <summary>
            Represents a control that lets the user pick a color.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker2.PartColorPickerPanel">
            <summary>
              The color picker panel part constant.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker2.SelectedColorProperty">
            <summary>
              The selected color property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker2.colorPickerPanel">
            <summary>
              The color picker panel.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker2.#cctor">
            <summary>
              Initializes static members of the <see cref="T:PropertyTools.Wpf.ColorPicker2"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker2.OnApplyTemplate">
            <summary>
            Called when <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/> is called.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker2.CoerceSelectedColorValue(System.Object)">
            <summary>
            Coerces the selected color value.
            </summary>
            <param name="basevalue">
            The basevalue.
            </param>
            <returns>
            The coerce selected color value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker2.OnDropDownOpened(System.EventArgs)">
            <summary>
            Reports when a combo box's popup opens.
            </summary>
            <param name="e">
            The event data for the <see cref="E:System.Windows.Controls.ComboBox.DropDownOpened"/> event.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker2.OnSelectedColorChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes in selected color.
            </summary>
            <param name="e">
            The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker2.CoerceSelectedColorValue(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the selected color value.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="basevalue">
            The basevalue.
            </param>
            <returns>
            The coerce selected color value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker2.SelectedColorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes in selected color.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker2.SelectedColor">
            <summary>
              Gets or sets the selected color.
            </summary>
            <value>The color of the selected.</value>
        </member>
        <member name="T:PropertyTools.Wpf.Bitmap">
            <summary>
            Represents an image that avoids blurring over pixel boundaries.
            </summary>
            <remarks>
            The Bitmap element is using the ActualWidth/Height of the image for the control size.
              It also offsets the image to avoid blurring over pixel boundaries.
              http://blogs.msdn.com/b/dwayneneed/archive/2007/10/05/blurry-bitmaps.aspx
            </remarks>
        </member>
        <member name="F:PropertyTools.Wpf.Bitmap.SourceProperty">
            <summary>
              The source property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Bitmap.sourceDownloaded">
            <summary>
              The source downloaded.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Bitmap.sourceFailed">
            <summary>
              The source failed.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Bitmap.pixelOffset">
            <summary>
              The pixel offset.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.Bitmap"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.MeasureOverride(System.Windows.Size)">
            <summary>
            When overridden in a derived class, measures the size in layout required for child elements and determines a size for the <see cref="T:System.Windows.FrameworkElement"/>-derived class.
            </summary>
            <param name="availableSize">
            The available size that this element can give to child elements. Infinity can be specified as a value to indicate that the element will size to whatever content is available.
            </param>
            <returns>
            The size that this element determines it needs during layout, based on its calculations of child element sizes.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            Called when rendering.
            </summary>
            <param name="dc">
            The dc.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.OnSourceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the source changed.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.ApplyVisualTransform(System.Windows.Point,System.Windows.Media.Visual,System.Boolean)">
            <summary>
            Applies the visual transform.
            </summary>
            <param name="point">
            The point.
            </param>
            <param name="v">
            The v.
            </param>
            <param name="inverse">
            if set to <c>true</c> [inverse].
            </param>
            <returns>
            The transformed point.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.AreClose(System.Windows.Point,System.Windows.Point)">
            <summary>
            Determines if two points are close.
            </summary>
            <param name="point1">
            The point1.
            </param>
            <param name="point2">
            The point2.
            </param>
            <returns>
            True if close.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.AreClose(System.Double,System.Double)">
            <summary>
            Determines of two values are close.
            </summary>
            <param name="value1">
            The value1.
            </param>
            <param name="value2">
            The value2.
            </param>
            <returns>
            True if close.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.GetPixelOffset">
            <summary>
            Gets the pixel offset.
            </summary>
            <returns>
            The pixel offset.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.GetVisualTransform(System.Windows.Media.Visual)">
            <summary>
            Gets the visual transform.
            </summary>
            <remarks>
            Gets the matrix that will convert a point from "above" the
              coordinate space of a visual into the the coordinate space
              "below" the visual.
            </remarks>
            <param name="v">
            The v.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.OnLayoutUpdated(System.Object,System.EventArgs)">
            <summary>
            Called when layout is updated.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.OnSourceDownloaded(System.Object,System.EventArgs)">
            <summary>
            Called when the source has downloaded.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.OnSourceFailed(System.Object,System.Windows.Media.ExceptionEventArgs)">
            <summary>
            Called when source failed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:System.Windows.Media.ExceptionEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.Bitmap.TryApplyVisualTransform(System.Windows.Point,System.Windows.Media.Visual,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Tries to apply the visual transform.
            </summary>
            <param name="point">
            The point.
            </param>
            <param name="v">
            The v.
            </param>
            <param name="inverse">
            if set to <c>true</c> [inverse].
            </param>
            <param name="throwOnError">
            if set to <c>true</c> [throw on error].
            </param>
            <param name="success">
            if set to <c>true</c> [success].
            </param>
            <returns>
            </returns>
        </member>
        <member name="E:PropertyTools.Wpf.Bitmap.BitmapFailed">
            <summary>
              The bitmap failed.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Bitmap.Source">
            <summary>
              Gets or sets the source.
            </summary>
            <value>The source.</value>
        </member>
        <member name="T:PropertyTools.Wpf.ColorPickerPanel">
            <summary>
            Represents a control that lets the user pick a color.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.PartHsv">
            <summary>
              The HSV control part name.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.AlphaProperty">
            <summary>
              The alpha property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.BlueProperty">
            <summary>
              The blue property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.BrightnessProperty">
            <summary>
              The brightness property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.GreenProperty">
            <summary>
              The green property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.HueProperty">
            <summary>
              The hue property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.IsPickingProperty">
            <summary>
              The is picking property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.RedProperty">
            <summary>
              The red property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.SaturationProperty">
            <summary>
              The saturation property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.SelectedColorProperty">
            <summary>
              The selected color property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.maxNumberOfRecentColors">
            <summary>
              The max number of recent colors.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.showHsvPanel">
            <summary>
              The show hsv panel.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.hsvControl">
            <summary>
              The HSV control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.pickingTimer">
            <summary>
              The picking timer.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.withinColorChange">
            <summary>
              The within color change.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPickerPanel.withinComponentChange">
            <summary>
              The within component change.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.#cctor">
            <summary>
              Initializes static members of the <see cref="T:PropertyTools.Wpf.ColorPickerPanel"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ColorPickerPanel"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.CoerceSelectedColorValue(System.Object)">
            <summary>
            Coerces the selected color value.
            </summary>
            <param name="basevalue">
            The basevalue.
            </param>
            <returns>
            The coerce selected color value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.OnComponentChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a color component is changed.
            </summary>
            <param name="e">
            The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.OnIsPickingChanged">
            <summary>
            Called when the IsPicking property is changed.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.OnSelectedColorChanged(System.Nullable{System.Windows.Media.Color},System.Nullable{System.Windows.Media.Color})">
            <summary>
            Called when the selected color changed.
            </summary>
            <param name="newColor">
            The new color.
            </param>
            <param name="oldColor">
            The old color.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.RaisePropertyChanged(System.String)">
            <summary>
            The raise property changed.
            </summary>
            <param name="property">
            The property.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.CoerceSelectedColorValue(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the selected color value.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="basevalue">
            The basevalue.
            </param>
            <returns>
            The coerce selected color value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.ComponentChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when a color component is changed.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.InitPalette">
            <summary>
            Initializes the palettes.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.IsPickingChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The is picking changed.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.SelectedColorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The selected color changed.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.AddColorToRecentColorsIfMissing(System.Windows.Media.Color)">
            <summary>
            The add color to recent colors if missing.
            </summary>
            <param name="color">
            The color.
            </param>
            <returns>
            True if the color was added.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.PanelUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the panel is unloaded.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.Pick(System.Object,System.EventArgs)">
            <summary>
            Pick a color from the current mouse position.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.UpdateHSV(System.Windows.Media.Color)">
            <summary>
            Updates the hue, saturation and brightness properties.
            </summary>
            <param name="color">
            The color.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanel.UpdateRGB(System.Windows.Media.Color)">
            <summary>
            Updates the red, green, blue and alpha properties.
            </summary>
            <param name="color">
            The color.
            </param>
        </member>
        <member name="E:PropertyTools.Wpf.ColorPickerPanel.PropertyChanged">
            <summary>
              The property changed.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.RecentColors">
            <summary>
              Gets the recent colors.
            </summary>
            <value>The recent colors.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.StandardColors">
            <summary>
              Gets the standard colors.
            </summary>
            <value>The standard colors.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.Strings">
            <summary>
              Gets or sets Strings.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.ThemeColors">
            <summary>
              Gets the theme colors.
            </summary>
            <value>The theme colors.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.Alpha">
            <summary>
              Gets or sets the alpha value.
            </summary>
            <value>The alpha.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.Blue">
            <summary>
              Gets or sets the blue.
            </summary>
            <value>The blue.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.Brightness">
            <summary>
              Gets or sets the brightness.
            </summary>
            <value>The brightness.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.Green">
            <summary>
              Gets or sets the green.
            </summary>
            <value>The green.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.Hue">
            <summary>
              Gets or sets the hue.
            </summary>
            <value>The hue.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.IsPicking">
            <summary>
              Gets or sets a value indicating whether this user is picking colors on the screen.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.MaxNumberOfRecentColors">
            <summary>
              Gets or sets the max number of recent colors.
            </summary>
            <value>The max number of recent colors.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.Red">
            <summary>
              Gets or sets the red value.
            </summary>
            <value>The red.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.Saturation">
            <summary>
              Gets or sets the saturation.
            </summary>
            <value>The saturation.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.SelectedColor">
            <summary>
              Gets or sets the selected color.
            </summary>
            <value>The color of the selected.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanel.ShowHsvPanel">
            <summary>
              Gets or sets a value indicating whether to show the HSV panel.
            </summary>
            <remarks>
              The backing field is static.
            </remarks>
        </member>
        <member name="T:PropertyTools.Wpf.ColorPickerPanelStrings">
            <summary>
            The color picker panel strings.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPickerPanelStrings.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ColorPickerPanelStrings"/> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanelStrings.ColorPickerToolTip">
            <summary>
              Gets or sets ColorPickerToolTip.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanelStrings.HSV">
            <summary>
              Gets or sets HSV.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanelStrings.RecentColors">
            <summary>
              Gets or sets RecentColors.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanelStrings.StandardColors">
            <summary>
              Gets or sets StandardColors.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanelStrings.ThemeColors">
            <summary>
              Gets or sets ThemeColors.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPickerPanelStrings.Values">
            <summary>
              Gets or sets Values.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.ColorSlider">
            <summary>
            Represents a color slider.
            </summary>
            <remarks>
            Original code by Ury Jamshy, 21 July 2011.
              See http://www.codeproject.com/KB/WPF/ColorPicker2010.aspx
              The Code Project Open License (CPOL)
              http://www.codeproject.com/info/cpol10.aspx
            </remarks>
        </member>
        <member name="T:PropertyTools.Wpf.SliderEx">
            <summary>
            Represents a slider that calls IEditableObject.BeginEdit/EndEdit when thumb dragging.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SliderEx.OnThumbDragCompleted(System.Windows.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            The on thumb drag completed.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SliderEx.OnThumbDragStarted(System.Windows.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            The on thumb drag started.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="F:PropertyTools.Wpf.ColorSlider.LeftColorProperty">
            <summary>
              The left color property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorSlider.RightColorProperty">
            <summary>
              The right color property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorSlider.#cctor">
            <summary>
              Initializes static members of the <see cref="T:PropertyTools.Wpf.ColorSlider"/> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorSlider.LeftColor">
            <summary>
              Gets or sets the left color.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorSlider.RightColor">
            <summary>
              Gets or sets the right color.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.HsvControl">
            <summary>
            The hsv control.
            </summary>
            <remarks>
            Original code by Ury Jamshy, 21 July 2011.
              See http://www.codeproject.com/KB/WPF/ColorPicker2010.aspx
              The Code Project Open License (CPOL)
              http://www.codeproject.com/info/cpol10.aspx
            </remarks>
        </member>
        <member name="F:PropertyTools.Wpf.HsvControl.PartThumb">
            <summary>
              The thumb name.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.HsvControl.HueProperty">
            <summary>
              The hue property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.HsvControl.SaturationProperty">
            <summary>
              The saturation property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.HsvControl.SelectedColorProperty">
            <summary>
              The selected color property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.HsvControl.ValueProperty">
            <summary>
              The value property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.HsvControl.thumbTransform">
            <summary>
              The thumb transform.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.HsvControl.thumb">
            <summary>
              The thumb.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.HsvControl.withinUpdate">
            <summary>
              The within update flag.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.#cctor">
            <summary>
              Initializes static members of the <see cref="T:PropertyTools.Wpf.HsvControl"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.OnApplyTemplate">
            <summary>
            The on apply template.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.UIElement.MouseLeftButtonDown"/> routed event is raised on this element. Implement this method to add class handling for this event.
            </summary>
            <param name="e">The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the left mouse button was pressed.</param>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.OnRenderSizeChanged(System.Windows.SizeChangedInfo)">
            <summary>
            The on render size changed.
            </summary>
            <param name="sizeInfo">
            The size info.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.OnHueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The on hue changed.
            </summary>
            <param name="relatedObject">
            The related object.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.OnSaturationChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The on saturation changed.
            </summary>
            <param name="relatedObject">
            The related object.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.OnThumbDragDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            The on thumb drag delta.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.OnValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The on value changed.
            </summary>
            <param name="relatedObject">
            The related object.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.LimitValue(System.Double,System.Double)">
            <summary>
            Limit value to range (0 , max]
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="max">
            The max.
            </param>
            <returns>
            The limit value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.OnThumbDragDelta(System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            The on thumb drag delta.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.UpdatePositionAndSaturationAndValue(System.Double,System.Double)">
            <summary>
            The update position and saturation and value.
            </summary>
            <param name="positionX">
            The position x.
            </param>
            <param name="positionY">
            The position y.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.UpdateSelectedColor">
            <summary>
            The update selected color.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.HsvControl.UpdateThumbPosition">
            <summary>
            The update thumb position.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.HsvControl.Hue">
            <summary>
              Gets or sets Hue.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.HsvControl.Saturation">
            <summary>
              Gets or sets Saturation.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.HsvControl.SelectedColor">
            <summary>
              Gets or sets SelectedColor.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.HsvControl.Value">
            <summary>
              Gets or sets Value.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.SpectrumSlider">
            <summary>
            The spectrum slider.
            </summary>
            <remarks>
            Original code by Ury Jamshy, 21 July 2011.
              See http://www.codeproject.com/KB/WPF/ColorPicker2010.aspx
              The Code Project Open License (CPOL)
              http://www.codeproject.com/info/cpol10.aspx
            </remarks>
        </member>
        <member name="F:PropertyTools.Wpf.SpectrumSlider.HueProperty">
            <summary>
              The hue property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpectrumSlider.withinChanging">
            <summary>
              The within changing flag.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SpectrumSlider.#cctor">
            <summary>
              Initializes static members of the <see cref="T:PropertyTools.Wpf.SpectrumSlider"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SpectrumSlider.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.SpectrumSlider"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SpectrumSlider.OnValueChanged(System.Double,System.Double)">
            <summary>
            The on value changed.
            </summary>
            <param name="oldValue">
            The old value.
            </param>
            <param name="newValue">
            The new value.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SpectrumSlider.OnHuePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The on hue property changed.
            </summary>
            <param name="relatedObject">
            The related object.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SpectrumSlider.SetBackground">
            <summary>
            The set background.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.SpectrumSlider.Hue">
            <summary>
              Gets or sets Hue.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.CaptureScreenshot">
            <summary>
            Captures a screenshot using gdi32 functions.
            </summary>
            <remarks>
            See http://stackoverflow.com/questions/1736287/capturing-a-window-with-wpf
            </remarks>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.Capture(System.Windows.Rect)">
            <summary>
            Capture the screenshot.
              <returns>
            Bitmap source that can be used e.g. as background.
              </returns>
            </summary>
            <param name="area">
            Area of screenshot.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.CorrectGetPosition(System.Windows.Media.Visual)">
            <summary>
            The correct get position.
            </summary>
            <param name="relativeTo">
            The relative to.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.GetMouseScreenPosition">
            <summary>
            The get mouse screen position.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.GetCursorPos(PropertyTools.Wpf.CaptureScreenshot.Win32Point@)">
            <summary>
            The get cursor pos.
            </summary>
            <param name="pt">
            The pt.
            </param>
            <returns>
            The get cursor pos.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.BitBlt(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations)">
            <summary>
            The bit blt.
            </summary>
            <param name="hdc">
            The hdc.
            </param>
            <param name="nXDest">
            The n x dest.
            </param>
            <param name="nYDest">
            The n y dest.
            </param>
            <param name="nWidth">
            The n width.
            </param>
            <param name="nHeight">
            The n height.
            </param>
            <param name="hdcSrc">
            The hdc src.
            </param>
            <param name="nXSrc">
            The n x src.
            </param>
            <param name="nYSrc">
            The n y src.
            </param>
            <param name="dwRop">
            The dw rop.
            </param>
            <returns>
            The bit blt.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.CreateBitmap(System.Int32,System.Int32,System.UInt32,System.UInt32,System.IntPtr)">
            <summary>
            The create bitmap.
            </summary>
            <param name="nWidth">
            The n width.
            </param>
            <param name="nHeight">
            The n height.
            </param>
            <param name="cPlanes">
            The c planes.
            </param>
            <param name="cBitsPerPel">
            The c bits per pel.
            </param>
            <param name="lpvBits">
            The lpv bits.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.CreateCompatibleBitmap(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The create compatible bitmap.
            </summary>
            <param name="hdc">
            The hdc.
            </param>
            <param name="nWidth">
            The n width.
            </param>
            <param name="nHeight">
            The n height.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.CreateCompatibleDC(System.IntPtr)">
            <summary>
            The create compatible dc.
            </summary>
            <param name="hdc">
            The hdc.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.DeleteObject(System.IntPtr)">
            <summary>
            The delete object.
            </summary>
            <param name="hObject">
            The h object.
            </param>
            <returns>
            The delete object.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.GetDC(System.IntPtr)">
            <summary>
            The get dc.
            </summary>
            <param name="hWnd">
            The h wnd.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            The release dc.
            </summary>
            <param name="hWnd">
            The h wnd.
            </param>
            <param name="hDC">
            The h dc.
            </param>
            <returns>
            The release dc.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CaptureScreenshot.SelectObject(System.IntPtr,System.IntPtr)">
            <summary>
            The select object.
            </summary>
            <param name="hdc">
            The hdc.
            </param>
            <param name="hgdiobj">
            The hgdiobj.
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations">
            <summary>
            The ternary raster operations.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.SRCCOPY">
            <summary>
              dest = source
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.SRCPAINT">
            <summary>
              dest = source OR dest
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.SRCAND">
            <summary>
              dest = source AND dest
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.SRCINVERT">
            <summary>
              dest = source XOR dest
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.SRCERASE">
            <summary>
              dest = source AND (NOT dest)
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.NOTSRCCOPY">
            <summary>
              dest = (NOT source)
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.NOTSRCERASE">
            <summary>
              dest = (NOT src) AND (NOT dest)
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.MERGECOPY">
            <summary>
              dest = (source AND pattern)
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.MERGEPAINT">
            <summary>
              dest = (NOT source) OR dest
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.PATCOPY">
            <summary>
              dest = pattern
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.PATPAINT">
            <summary>
              dest = DPSnoo
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.PATINVERT">
            <summary>
              dest = pattern XOR dest
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.DSTINVERT">
            <summary>
              dest = (NOT dest)
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.BLACKNESS">
            <summary>
              dest = BLACK
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.TernaryRasterOperations.WHITENESS">
            <summary>
              dest = WHITE
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.CaptureScreenshot.Win32Point">
            <summary>
            The win 32 point.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.Win32Point.X">
            <summary>
              The x.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CaptureScreenshot.Win32Point.Y">
            <summary>
              The y.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.ColorPicker">
            <summary>
            Represents a control that lets the user pick a color.
            </summary>
            <summary>
            Represents a control that lets the user pick a color.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.CurrentStoreProperty">
            <summary>
              The current store property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.PersistentPaletteProperty">
            <summary>
              The persistent palette property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.SelectedPersistentColorProperty">
            <summary>
              The selected persistent color property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.mouseEvent">
            <summary>
              Event handler for use by multiple controls
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.persistentList">
            <summary>
              Reference to the listbox that holds the persistent palette
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.staticList">
            <summary>
              Reference to the listbox that holds the static palette
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.CreateEmptyPalette">
            <summary>
            Creates the empty palette.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.LoadPalette(PropertyTools.Wpf.ColorPicker,System.String)">
            <summary>
            Loads the palette.
            </summary>
            <param name="picker">
            The picker.
            </param>
            <param name="path">
            The path.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.StorePalette(PropertyTools.Wpf.ColorPicker,System.String)">
            <summary>
            Stores the palette.
            </summary>
            <param name="picker">
            The picker.
            </param>
            <param name="path">
            The path.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.GetMode(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Gets the mode of operation
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.
            </param>
            <returns>
            The mode of operation for the click event
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.InitializePaletteSettings">
            <summary>
            Links the palette event handlers.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.LoadLastPalette">
            <summary>
            The load last palette.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.LoadPalette_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the LoadPalette control.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.PaletteList_MouseUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Handles the MouseUp event of the PersistentList control.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.SavePalette_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles the Click event of the SavePalette control.
            </summary>
            <param name="sender">
            The source of the event.
            </param>
            <param name="e">
            The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.StoreLastUsedPalette(System.String)">
            <summary>
            Stores the last used palette.
            </summary>
            <param name="path">
            The path.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.UpdateCurrentPaletteStore">
            <summary>
            Updates the current palette store.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.IsDropDownOpenProperty">
            <summary>
              The is drop down open property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.IsPickingProperty">
            <summary>
              The is picking property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.PaletteProperty">
            <summary>
              The palette property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.SelectedColorProperty">
            <summary>
              The selected color property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.ShowAsHexProperty">
            <summary>
              The show as hex property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.TabStripPlacementProperty">
            <summary>
              The tab strip placement property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.brightness">
            <summary>
              The brightness.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.hue">
            <summary>
              The hue.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.pickingTimer">
            <summary>
              The picking timer.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.saturation">
            <summary>
              The saturation.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.staticColorList">
            <summary>
              The static color list.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.updateHSV">
            <summary>
              The update hsv.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.updateHexValue">
            <summary>
              The update hex value.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.#cctor">
            <summary>
              Initializes static members of the <see cref="T:PropertyTools.Wpf.ColorPicker"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ColorPicker"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.CreateDefaultPalette">
            <summary>
            Creates the default palette.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.KeyDown"/> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">
            The <see cref="T:System.Windows.Input.KeyEventArgs"/> that contains the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.OnPropertyChanged(System.String)">
            <summary>
            Called when a property changed.
            </summary>
            <param name="propertyName">
            Name of the property.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.CoerceIsDropDownOpen(System.Windows.DependencyObject,System.Object)">
            <summary>
            The coerce is drop down open.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="basevalue">
            The basevalue.
            </param>
            <returns>
            The coerce is drop down open.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.IsDropDownOpenChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The is drop down open changed.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.IsPickingChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The is picking changed.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.OnGotFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the control got focus.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.OnMouseButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Called when [mouse button down].
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.SelectedColorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The selected color changed.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.SelectedPersistentColorChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The selected persistent color changed.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.CloseDropDown">
            <summary>
            Closes the drop down.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.ColorPickerLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the control is loaded.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.IsDropDownOpenChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The is drop down open changed.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.IsPickingChanged">
            <summary>
            Called when IsPicking is changed.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.OnCoerceIsDropDownOpen(System.Object)">
            <summary>
            The on coerce is drop down open.
            </summary>
            <param name="basevalue">
            The basevalue.
            </param>
            <returns>
            The on coerce is drop down open.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.OnSelectedValueChanged">
            <summary>
            Called when the selected value changed.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.Pick(System.Object,System.EventArgs)">
            <summary>
            Picks a color from the screen.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:System.EventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ColorPicker.ToggleDropDown">
            <summary>
            Toggles the drop down.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.DefaultPalettePath">
            <summary>
              Gets or sets DefaultPalettePath.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.SettingsFile">
            <summary>
              Gets or sets the settings file where the ColorPicker will store user settings.
            </summary>
            <value>The settings file.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.CurrentStore">
            <summary>
              Gets or sets CurrentStore.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.PersistentPalette">
            <summary>
              Gets or sets PersistentPalette.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.SelectedPersistentColor">
            <summary>
              Gets or sets SelectedPersistentColor.
            </summary>
        </member>
        <member name="E:PropertyTools.Wpf.ColorPicker.PropertyChanged">
            <summary>
              Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.Alpha">
            <summary>
              Gets or sets the alpha.
            </summary>
            <value>The alpha.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.AlphaGradient">
            <summary>
              Gets the alpha gradient.
            </summary>
            <value>The alpha gradient.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.Blue">
            <summary>
              Gets or sets the blue.
            </summary>
            <value>The blue.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.Brightness">
            <summary>
              Gets or sets the brightness.
            </summary>
            <value>The brightness.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.BrightnessGradient">
            <summary>
              Gets the brightness gradient.
            </summary>
            <value>The brightness gradient.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.ColorName">
            <summary>
              Gets the name of the color.
            </summary>
            <value>The name of the color.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.Green">
            <summary>
              Gets or sets the green.
            </summary>
            <value>The green.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.HexValue">
            <summary>
              Gets or sets the hex value.
            </summary>
            <value>The hex value.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.Hue">
            <summary>
              Gets or sets the hue.
            </summary>
            <value>The hue.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.IsDropDownOpen">
            <summary>
              Gets or sets a value indicating whether the color picker popup is open.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.IsPicking">
            <summary>
              Gets or sets if picking colors from the screen is active.
            </summary>
            <remarks>
              Use the 'SHIFT' button to select colors when this mode is active.
            </remarks>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.Palette">
            <summary>
              Gets or sets the palette.
            </summary>
            <value>The palette.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.Red">
            <summary>
              Gets or sets the red.
            </summary>
            <value>The red.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.Saturation">
            <summary>
              Gets or sets the saturation.
            </summary>
            <value>The saturation.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.SaturationGradient">
            <summary>
              Gets the saturation gradient.
            </summary>
            <value>The saturation gradient.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.SelectedColor">
            <summary>
              Gets or sets the selected color.
            </summary>
            <value>The color of the selected.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.ShowAsHex">
            <summary>
              Gets or sets a value indicating whether to show as color names as hex strings.
            </summary>
            <value><c>true</c> if show as hex; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColorPicker.TabStripPlacement">
            <summary>
              Gets or sets the tab strip placement.
            </summary>
            <value>The tab strip placement.</value>
        </member>
        <member name="T:PropertyTools.Wpf.ColorPicker.Mode">
            <summary>
            The mode.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.Mode.None">
            <summary>
              The none.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.Mode.Add">
            <summary>
              The add.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.Mode.Remove">
            <summary>
              The remove.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorPicker.Mode.Update">
            <summary>
              The update.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.Controls.ColorPicker.ColorWrapper">
            <summary>
            Represents a color.
            </summary>
            <remarks>
            Wrapper class for colors - needed to get unique items in the persistent color list
              since Color.XXX added in multiple positions results in multiple items being selected.
              Also needed to implement the INotifyPropertyChanged for binding support.
            </remarks>
        </member>
        <member name="F:PropertyTools.Wpf.Controls.ColorPicker.ColorWrapper.color">
            <summary>
              The color.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.Controls.ColorPicker.ColorWrapper.#ctor(System.Windows.Media.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.Controls.ColorPicker.ColorWrapper"/> class.
            </summary>
            <param name="c">
            The c.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.Controls.ColorPicker.ColorWrapper.OnPropertyChanged(System.String)">
            <summary>
            The on property changed.
            </summary>
            <param name="propertyName">
            The property name.
            </param>
        </member>
        <member name="E:PropertyTools.Wpf.Controls.ColorPicker.ColorWrapper.PropertyChanged">
            <summary>
              The property changed.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Controls.ColorPicker.ColorWrapper.Color">
            <summary>
              Gets or sets Color.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.DockPanelSplitter">
            <summary>
            Represents a control that lets the user change the size of elements in a <see cref="T:System.Windows.Controls.DockPanel"/>.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DockPanelSplitter.ProportionalResizeProperty">
            <summary>
              The proportional resize property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DockPanelSplitter.ThicknessProperty">
            <summary>
              The thickness property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DockPanelSplitter.element">
            <summary>
              The element.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DockPanelSplitter.height">
            <summary>
              The height.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DockPanelSplitter.previousParentHeight">
            <summary>
              The previous parent height.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DockPanelSplitter.previousParentWidth">
            <summary>
              The previous parent width.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DockPanelSplitter.startDragPoint">
            <summary>
              The start drag point.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DockPanelSplitter.width">
            <summary>
              The width.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.#cctor">
            <summary>
              Initializes static members of the <see cref="T:PropertyTools.Wpf.DockPanelSplitter"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.DockPanelSplitter"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown"/> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">
            The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseEnter"/> attached event is raised on this element. Implement this method to add class handling for this event.
            </summary>
            <param name="e">
            The <see cref="T:System.Windows.Input.MouseEventArgs"/> that contains the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseMove"/> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">
            The <see cref="T:System.Windows.Input.MouseEventArgs"/> that contains the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseUp"/> routed event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">
            The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. The event data reports that the mouse button was released.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.DockChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The dock changed.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.ThicknessChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The thickness changed.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.AdjustHeight(System.Double,System.Windows.Controls.Dock)">
            <summary>
            Adjusts the height.
            </summary>
            <param name="dy">
            The dy.
            </param>
            <param name="dock">
            The dock.
            </param>
            <returns>
            The adjust height.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.AdjustWidth(System.Double,System.Windows.Controls.Dock)">
            <summary>
            Adjusts the width.
            </summary>
            <param name="dx">
            The dx.
            </param>
            <param name="dock">
            The dock.
            </param>
            <returns>
            The adjust width.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.DockPanelSplitterLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the control is loaded.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.DockPanelSplitterUnloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when the control is unloaded.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.ParentSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            Called when the parent element size is changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:System.Windows.SizeChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.SetTargetHeight(System.Double)">
            <summary>
            Sets the height of the target.
            </summary>
            <param name="newHeight">
            The new height.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.SetTargetWidth(System.Double)">
            <summary>
            Sets the width of the target.
            </summary>
            <param name="newWidth">
            The new width.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.UpdateHeightOrWidth">
            <summary>
            Updates the width or height .
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DockPanelSplitter.UpdateTargetElement">
            <summary>
            Updates the target element (the element the DockPanelSplitter works on).
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DockPanelSplitter.IsHorizontal">
            <summary>
              Gets a value indicating whether this splitter is horizontal.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DockPanelSplitter.ProportionalResize">
            <summary>
              Gets or sets a value indicating whether to resize elements proportionally.
            </summary>
            <remarks>
              Set to false if you don't want the element to be resized when the parent is resized.
            </remarks>
        </member>
        <member name="P:PropertyTools.Wpf.DockPanelSplitter.Thickness">
            <summary>
              Gets or sets the thickness (height or width, depending on orientation).
            </summary>
            <value>The thickness.</value>
        </member>
        <member name="T:PropertyTools.Wpf.EnumMenuItem">
            <summary>
            Represents a menu item with a SelectedValue property that can bind to Enum values.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.EnumMenuItem.SelectedValueProperty">
            <summary>
              The selected value property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.EnumMenuItem.SelectedValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The selected value changed.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.EnumMenuItem.ItemClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Called when a menu item is clicked.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.EnumMenuItem.OnSelectedValueChanged">
            <summary>
            Called when selected value changed.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.EnumMenuItem.SelectedValue">
            <summary>
              Gets or sets the selected value.
            </summary>
            <value>The selected value.</value>
        </member>
        <member name="T:PropertyTools.Wpf.DirectoryPicker">
            <summary>
            Represents a control that allows the user to pick a directory.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DirectoryPicker.DirectoryProperty">
            <summary>
              The directory property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DirectoryPicker.FolderBrowserDialogServiceProperty">
            <summary>
              The folder browser dialog service property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DirectoryPicker.#cctor">
            <summary>
              Initializes static members of the <see cref="T:PropertyTools.Wpf.DirectoryPicker"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DirectoryPicker.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.DirectoryPicker"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DirectoryPicker.Browse">
            <summary>
            Open the browse dialog.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DirectoryPicker.BrowseCommand">
            <summary>
              Gets or sets the browse command.
            </summary>
            <value>The browse command.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DirectoryPicker.Directory">
            <summary>
              Gets or sets the directory.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DirectoryPicker.FolderBrowserDialogService">
            <summary>
              Gets or sets FolderBrowserDialogService.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.FilePicker">
            <summary>
            Represents a control that allows the user to pick a file.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FilePicker.BasePathProperty">
            <summary>
              The base path property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FilePicker.DefaultExtensionProperty">
            <summary>
              The default extension property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FilePicker.FileDialogServiceProperty">
            <summary>
              The file dialog service property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FilePicker.FilePathProperty">
            <summary>
              The file path property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FilePicker.FilterProperty">
            <summary>
              The filter property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FilePicker.UseOpenDialogProperty">
            <summary>
              The use open dialog property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.FilePicker.#cctor">
            <summary>
              Initializes static members of the <see cref="T:PropertyTools.Wpf.FilePicker"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.FilePicker.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.FilePicker"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.FilePicker.Browse">
            <summary>
            Open the browse dialog.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.FilePicker.GetAbsolutePath(System.String)">
            <summary>
            Gets the absolute path.
            </summary>
            <param name="filePath">
            The file path.
            </param>
            <returns>
            The get absolute path.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.FilePicker.GetRelativePath(System.String)">
            <summary>
            Gets the relative path.
            </summary>
            <param name="filePath">
            The file path.
            </param>
            <returns>
            The get relative path.
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.BasePath">
            <summary>
              Gets or sets the base path.
            </summary>
            <value>The base path.</value>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.BrowseCommand">
            <summary>
              Gets or sets the browse command.
            </summary>
            <value>The browse command.</value>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.DefaultExtension">
            <summary>
              Gets or sets the default extension.
            </summary>
            <value>The default extension.</value>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.FileDialogService">
            <summary>
              Gets or sets the file dialog service.
            </summary>
            <value>The file dialog service.</value>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.FilePath">
            <summary>
              Gets or sets the file path.
            </summary>
            <value>The file path.</value>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.Filter">
            <summary>
              Gets or sets the filter.
            </summary>
            <value>The filter.</value>
        </member>
        <member name="P:PropertyTools.Wpf.FilePicker.UseOpenDialog">
            <summary>
              Gets or sets a value indicating whether [use open dialog].
            </summary>
            <value><c>true</c> if [use open dialog]; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:PropertyTools.Wpf.IFileDialogService">
            <summary>
            The file dialog interface.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.IFileDialogService.ShowOpenFileDialog(System.String@,System.String,System.String)">
            <summary>
            Shows the open file dialog.
            </summary>
            <param name="filename">
            The filename.
            </param>
            <param name="filter">
            The filter.
            </param>
            <param name="defaultExtension">
            The default extension.
            </param>
            <returns>
            True if the user pressed ok.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.IFileDialogService.ShowSaveFileDialog(System.String@,System.String,System.String)">
            <summary>
            Shows the save file dialog.
            </summary>
            <param name="filename">
            The filename.
            </param>
            <param name="filter">
            The filter.
            </param>
            <param name="defaultExtension">
            The default extension.
            </param>
            <returns>
            True if the user pressed ok.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.IFolderBrowserDialogService">
            <summary>
            The browser dialog interface.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.IFolderBrowserDialogService.ShowFolderBrowserDialog(System.String@,System.Boolean,System.String,System.Boolean)">
            <summary>
            Shows the folder browser dialog.
            </summary>
            <param name="directory">
            The directory.
            </param>
            <param name="showNewFolderButton">
            show the new folder button if set to <c>true</c>.
            </param>
            <param name="description">
            The description.
            </param>
            <param name="useDescriptionForTitle">
            Use description for title if set to <c>true</c>.
            </param>
            <returns>
            True if the user pressed ok.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.FormattingTextBox">
            <summary>
            Represents a TextBox with a bindable StringFormat property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FormattingTextBox.FormatProviderProperty">
            <summary>
              The format provider property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FormattingTextBox.StringFormatProperty">
            <summary>
              The string format property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FormattingTextBox.ValueProperty">
            <summary>
              The value property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FormattingTextBox.userIsChanging">
            <summary>
              The user is changing.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.FormattingTextBox.#cctor">
            <summary>
              Initializes static members of the <see cref="T:PropertyTools.Wpf.FormattingTextBox"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.FormattingTextBox.StringFormatChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The string format changed.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.FormattingTextBox.TextChangedCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The text changed callback.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.FormattingTextBox.ValueChangedCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The value changed callback.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.FormattingTextBox.UnFormat(System.String)">
            <summary>
            Unformats the text.
            </summary>
            <param name="s">
            The s.
            </param>
            <returns>
            The un format.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.FormattingTextBox.UpdateText">
            <summary>
            Updates the text.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.FormattingTextBox.UpdateValue">
            <summary>
            Updates the value.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.FormattingTextBox.FormatProvider">
            <summary>
              Gets or sets the format provider.
            </summary>
            <value>The format provider.</value>
        </member>
        <member name="P:PropertyTools.Wpf.FormattingTextBox.StringFormat">
            <summary>
              Gets or sets the string format.
            </summary>
            <value>The string format.</value>
        </member>
        <member name="P:PropertyTools.Wpf.FormattingTextBox.Value">
            <summary>
              Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:PropertyTools.Wpf.LinkBlock">
            <summary>
            Provides a lightweight control for displaying hyperlinks.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.LinkBlock.NavigateUriProperty">
            <summary>
              The navigate uri property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.LinkBlock.#cctor">
            <summary>
              Initializes static members of the <see cref="T:PropertyTools.Wpf.LinkBlock"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.LinkBlock.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Mouse.MouseDown"/> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">
            The <see cref="T:System.Windows.Input.MouseButtonEventArgs"/> that contains the event data. This event data reports details about the mouse button that was pressed and the handled state.
            </param>
        </member>
        <member name="P:PropertyTools.Wpf.LinkBlock.NavigateUri">
            <summary>
              Gets or sets the navigation URI.
            </summary>
            <value>The navigate URI.</value>
        </member>
        <member name="T:PropertyTools.Wpf.PopupBox">
            <summary>
            Represents a popup control that provides a data template for the popup.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PopupBox.PopupTemplateProperty">
            <summary>
              The popup template property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PopupBox.#cctor">
            <summary>
              Initializes static members of the <see cref="T:PropertyTools.Wpf.PopupBox"/> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PopupBox.PopupTemplate">
            <summary>
              Gets or sets the popup template.
            </summary>
            <value>The popup template.</value>
        </member>
        <member name="T:PropertyTools.Wpf.SpinControl">
            <summary>
            Represents a spinner control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.PartDown">
            <summary>
              The part down.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.PartUp">
            <summary>
              The part up.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.DownButtonGeometryProperty">
            <summary>
              The down button geometry property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.LargeChangeProperty">
            <summary>
              The large change property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.MaximumProperty">
            <summary>
              The maximum property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.MinimumProperty">
            <summary>
              The minimum property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.RepeatIntervalProperty">
            <summary>
              The repeat SmallChange property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.SmallChangeProperty">
            <summary>
              The SmallChange property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.SpinButtonWidthProperty">
            <summary>
              The spin button width property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.UpButtonGeometryProperty">
            <summary>
              The up button geometry property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.ValueProperty">
            <summary>
              The value property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.downbutton">
            <summary>
              The down button.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SpinControl.upbutton">
            <summary>
              The up button.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SpinControl.#cctor">
            <summary>
              Initializes static members of the <see cref="T:PropertyTools.Wpf.SpinControl"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SpinControl.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SpinControl.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            The on mouse wheel.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SpinControl.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when an unhandled <see cref="E:System.Windows.Input.Keyboard.PreviewKeyDown"/> attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">
            The <see cref="T:System.Windows.Input.KeyEventArgs"/> that contains the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SpinControl.CoerceSpinnerValue(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the spinner value.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="basevalue">
            The basevalue.
            </param>
            <returns>
            The coerce spinner value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SpinControl.SpinnerValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The spinner value changed.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SpinControl.ChangeValue(System.Int32,System.Boolean)">
            <summary>
            Changes the value.
            </summary>
            <param name="sign">
            The sign of the change.
            </param>
            <param name="isLargeChange">
            The is Large Change.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SpinControl.CoerceSpinnerValue(System.Object)">
            <summary>
            Coerces the spinner value.
            </summary>
            <param name="basevalue">
            The basevalue.
            </param>
            <returns>
            The coerced value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SpinControl.DownbuttonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles down button clicks.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SpinControl.IsNumeric(System.Object)">
            <summary>
            Check if an object is of a numeric type.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            True if the value is of a numeric type.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SpinControl.UpbuttonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Handles up button clicks.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="P:PropertyTools.Wpf.SpinControl.DownButtonGeometry">
            <summary>
              Gets or sets down button geometry.
            </summary>
            <value>Down button geometry.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SpinControl.LargeChange">
            <summary>
              Gets or sets the large change.
            </summary>
            <value>The large change.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SpinControl.Maximum">
            <summary>
              Gets or sets the maximum.
            </summary>
            <value>The maximum.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SpinControl.Minimum">
            <summary>
              Gets or sets the minimum.
            </summary>
            <value>The minimum.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SpinControl.RepeatInterval">
            <summary>
              Gets or sets the repeat SmallChange (milliseconds).
            </summary>
            <value>The repeat SmallChange.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SpinControl.SmallChange">
            <summary>
              Gets or sets the SmallChange.
            </summary>
            <value>The SmallChange.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SpinControl.SpinButtonWidth">
            <summary>
              Gets or sets the width of the spin buttons.
            </summary>
            <value>The width of the spin button.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SpinControl.UpButtonGeometry">
            <summary>
              Gets or sets up button geometry.
            </summary>
            <value>Up button geometry.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SpinControl.Value">
            <summary>
              Gets or sets the value.
            </summary>
            <value>The value.</value>
        </member>
        <member name="T:PropertyTools.Wpf.StackPanelEx">
            <summary>
            Represents a stack panel that counts the number of visible children.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.StackPanelEx.VisibleChildrenCountProperty">
            <summary>
              The visible children count property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.StackPanelEx.ArrangeOverride(System.Windows.Size)">
            <summary>
            Arranges the content of a <see cref="T:System.Windows.Controls.StackPanel"/> element.
            </summary>
            <param name="arrangeSize">
            The <see cref="T:System.Windows.Size"/> that this element should use to arrange its child elements.
            </param>
            <returns>
            The <see cref="T:System.Windows.Size"/> that represents the arranged size of this <see cref="T:System.Windows.Controls.StackPanel"/> element and its child elements.
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.StackPanelEx.VisibleChildrenCount">
            <summary>
              Gets the number of visible children.
            </summary>
            <value>
              The visible children count.
            </value>
        </member>
        <member name="T:PropertyTools.Wpf.TextBoxEx">
            <summary>
            Represents a TextBox that can update the binding on enter.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TextBoxEx.MoveFocusOnEnterProperty">
            <summary>
              The move focus on enter property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TextBoxEx.UpdateBindingOnEnterProperty">
            <summary>
              The update binding on enter property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TextBoxEx.OnGotFocus(System.Windows.RoutedEventArgs)">
            <summary>
            The on got focus.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TextBoxEx.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            The on preview key down.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="P:PropertyTools.Wpf.TextBoxEx.MoveFocusOnEnter">
            <summary>
              Gets or sets a value indicating whether MoveFocusOnEnter.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TextBoxEx.UpdateBindingOnEnter">
            <summary>
              Gets or sets a value indicating whether UpdateBindingOnEnter.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.BoolToVisibilityConverter">
            <summary>
            Converts <see cref="T:System.Boolean"/> instances to <see cref="T:System.Windows.Visibility"/> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.BoolToVisibilityConverter.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.BoolToVisibilityConverter"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.BoolToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value produced by the binding source.
            </param>
            <param name="targetType">
            The type of the binding target property.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.BoolToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value that is produced by the binding target.
            </param>
            <param name="targetType">
            The type to convert to.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.BoolToVisibilityConverter.InvertVisibility">
            <summary>
              Gets or sets a value indicating whether to invert visibility.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.BoolToVisibilityConverter.NotVisibleValue">
            <summary>
              Gets or sets the not visible value.
            </summary>
            <value>The not visible value.</value>
        </member>
        <member name="T:PropertyTools.Wpf.ColorToComponentConverter">
            <summary>
            Converts <see cref="T:System.Windows.Media.Color"/> instances to hex <see cref="T:System.String"/> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorToComponentConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value produced by the binding source.
            </param>
            <param name="targetType">
            The type of the binding target property.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorToComponentConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value that is produced by the binding target.
            </param>
            <param name="targetType">
            The type to convert to.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ColorToStringConverter">
            <summary>
            Converts <see cref="T:System.Windows.Media.Color"/> instances to <see cref="T:System.String"/> instances..
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColorToStringConverter.colors">
            <summary>
              The string to color map.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value produced by the binding source.
            </param>
            <param name="targetType">
            The type of the binding target property.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value that is produced by the binding target.
            </param>
            <param name="targetType">
            The type to convert to.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.ColorToStringConverter.ColorMap">
            <summary>
              Gets the string to color map.
            </summary>
            <value>The color map.</value>
        </member>
        <member name="T:PropertyTools.Wpf.TimeSpanToStringConverter">
            <summary>
            Converts <see cref="T:System.TimeSpan"/> instances to <see cref="T:System.String"/> instances..
            </summary>
            <remarks>
            The format string can be specified as the converter parameter.
            </remarks>
        </member>
        <member name="F:PropertyTools.Wpf.TimeSpanToStringConverter.formatter">
            <summary>
            The formatter.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TimeSpanToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value produced by the binding source. 
            </param>
            <param name="targetType">
            The type of the binding target property. 
            </param>
            <param name="parameter">
            The converter parameter to use. 
            </param>
            <param name="culture">
            The culture to use in the converter. 
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used. 
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TimeSpanToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value that is produced by the binding target. 
            </param>
            <param name="targetType">
            The type to convert to. 
            </param>
            <param name="parameter">
            The converter parameter to use. 
            </param>
            <param name="culture">
            The culture to use in the converter. 
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used. 
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.DefinedColorToVisibilityConverter">
            <summary>
            Converts <see cref="T:System.Windows.Media.Color"/> instances to <see cref="T:System.Windows.Visibility"/> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DefinedColorToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value produced by the binding source.
            </param>
            <param name="targetType">
            The type of the binding target property.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefinedColorToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value that is produced by the binding target.
            </param>
            <param name="targetType">
            The type to convert to.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ValueToVisibilityConverter">
            <summary>
            Converts <see cref="T:System.Object"/> instances to <see cref="T:System.Windows.Visibility"/> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ValueToVisibilityConverter.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ValueToVisibilityConverter"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ValueToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value produced by the binding source.
            </param>
            <param name="targetType">
            The type of the binding target property.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ValueToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value that is produced by the binding target.
            </param>
            <param name="targetType">
            The type to convert to.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.ValueToVisibilityConverter.EqualsVisibility">
            <summary>
              Gets or sets the visibility to return when the value to convert equals the converter parameter.
            </summary>
            <value>The equals visibility.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ValueToVisibilityConverter.NotEqualsVisibility">
            <summary>
              Gets or sets the visibility to return when the value to convert does not equal the converter parameter.
            </summary>
            <value>The not equals visibility.</value>
        </member>
        <member name="T:PropertyTools.Wpf.HueToColorConverter">
            <summary>
            Converts a hue values to <see cref="T:System.Windows.Media.Color"/> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.HueToColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value produced by the binding source.
            </param>
            <param name="targetType">
            The type of the binding target property.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.HueToColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value that is produced by the binding target.
            </param>
            <param name="targetType">
            The type to convert to.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ZeroToVisibilityConverter">
            <summary>
            Converts <see cref="T:System.Int32"/> instances to <see cref="T:System.Windows.Visibility"/> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ZeroToVisibilityConverter.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ZeroToVisibilityConverter"/> class. 
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.NullToVisibilityConverter"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ZeroToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value produced by the binding source.
            </param>
            <param name="targetType">
            The type of the binding target property.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ZeroToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value that is produced by the binding target.
            </param>
            <param name="targetType">
            The type to convert to.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.ZeroToVisibilityConverter.NotZeroVisibility">
            <summary>
              Gets or sets the not null visibility.
            </summary>
            <value>The not null visibility.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ZeroToVisibilityConverter.ZeroVisibility">
            <summary>
              Gets or sets the null visibility.
            </summary>
            <value>The null visibility.</value>
        </member>
        <member name="T:PropertyTools.Wpf.DrawingColorToMediaColorConverter">
            <summary>
            Converts <see cref="T:System.Windows.Media.Color"/> instances to <see cref="T:System.Drawing.Color"/> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DrawingColorToMediaColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value produced by the binding source.
            </param>
            <param name="targetType">
            The type of the binding target property.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DrawingColorToMediaColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value that is produced by the binding target.
            </param>
            <param name="targetType">
            The type to convert to.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.DoubleToGridLengthConverter">
            <summary>
            Converts <see cref="T:System.Double"/> instances to <see cref="T:System.Windows.GridLength"/> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DoubleToGridLengthConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value produced by the binding source.
            </param>
            <param name="targetType">
            The type of the binding target property.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DoubleToGridLengthConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value that is produced by the binding target.
            </param>
            <param name="targetType">
            The type to convert to.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.EnumDescriptionConverter">
            <summary>
            Converts <see cref="T:System.Enum"/> instances to description <see cref="T:System.String"/> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.EnumDescriptionConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value produced by the binding source.
            </param>
            <param name="targetType">
            The type of the binding target property.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.EnumDescriptionConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value that is produced by the binding target.
            </param>
            <param name="targetType">
            The type to convert to.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.NullToBoolConverter">
            <summary>
            Null to bool value converter
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.NullToBoolConverter.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.NullToBoolConverter"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.NullToBoolConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value produced by the binding source.
            </param>
            <param name="targetType">
            The type of the binding target property.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.NullToBoolConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value that is produced by the binding target.
            </param>
            <param name="targetType">
            The type to convert to.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.NullToBoolConverter.NullValue">
            <summary>
              Gets or sets a value indicating whether the source value is null.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.NullToVisibilityConverter">
            <summary>
            Converts <see cref="T:System.Windows.Visibility"/> instances to <see cref="T:System.Object"/> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.NullToVisibilityConverter.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.NullToVisibilityConverter"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.NullToVisibilityConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value produced by the binding source.
            </param>
            <param name="targetType">
            The type of the binding target property.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.NullToVisibilityConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value that is produced by the binding target.
            </param>
            <param name="targetType">
            The type to convert to.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.NullToVisibilityConverter.NotNullVisibility">
            <summary>
              Gets or sets the not null visibility.
            </summary>
            <value>The not null visibility.</value>
        </member>
        <member name="P:PropertyTools.Wpf.NullToVisibilityConverter.NullVisibility">
            <summary>
              Gets or sets the null visibility.
            </summary>
            <value>The null visibility.</value>
        </member>
        <member name="T:PropertyTools.Wpf.FormattedTimeSpanParser">
            <summary>
            TimeSpan parser that use a format string to evaluate the input string.
            </summary>
            <remarks>
            Supports the following format codes: D, DD, H, HH, M, MM, S, SS, d, dd, h, hh, m, mm, s, ss, f, ff, fff
            </remarks>
        </member>
        <member name="F:PropertyTools.Wpf.FormattedTimeSpanParser.specialCharacters">
            <summary>
            The special characters.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.FormattedTimeSpanParser.conversionExpression">
            <summary>
            The conversion expression.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.FormattedTimeSpanParser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.FormattedTimeSpanParser"/> class.
            </summary>
            <param name="formatString">
            The format string.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.FormattedTimeSpanParser.Parse(System.String)">
            <summary>
            Parses the specified time span string.
            </summary>
            <param name="value">
            The value. 
            </param>
            <returns>
            A time span. 
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.FormattedTimeSpanParser.Expression">
            <summary>
            Gets or sets the regular expression.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.ItemsGrid.IItemsGridControlFactory">
            <summary>
            Specifies a control factory for the ItemsGrid.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.IItemsGridControlFactory.CreateDisplayControl(PropertyTools.Wpf.ItemsGrid.PropertyDefinition,System.Object)">
            <summary>
            Creates the display control.
            </summary>
            <param name="property">The property.</param>
            <param name="instance">The instance.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.IItemsGridControlFactory.CreateEditControl(PropertyTools.Wpf.ItemsGrid.PropertyDefinition,System.Object)">
            <summary>
            Creates the edit control.
            </summary>
            <param name="property">The property.</param>
            <param name="instance">The instance.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ItemsGrid.PropertyDefinition">
            <summary>
            Describes a property to be presented in a column (or row).
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.PropertyDefinition.#ctor(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ItemsGrid.PropertyDefinition"/> class.
            </summary>
            <param name="propertyDescriptor">The property descriptor.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.PropertyDefinition.SetEnumItemsSource">
            <summary>
            Sets the enum items source.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.PropertyDefinition.GetAttribute``1">
            <summary>
            Gets the first attribute of the specified type.
            </summary>
            <typeparam name="T">
            Type of attribute.
            </typeparam>
            <returns>
            The attribute, or null.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.PropertyDefinition.CreateBinding(System.Windows.Data.UpdateSourceTrigger)">
            <summary>
            Creates the binding.
            </summary>
            <param name="trigger">The trigger.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.PropertyDefinition.CreateOneWayBinding">
            <summary>
            Creates the one way binding.
            </summary>
            <returns></returns>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.PropertyDefinition.Descriptor">
            <summary>
            Gets or sets the descriptor.
            </summary>
            <value>The descriptor.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.PropertyDefinition.Header">
            <summary>
            Gets or sets the header.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.PropertyDefinition.FormatString">
            <summary>
            Gets or sets the format string.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.PropertyDefinition.Converter">
            <summary>
            Gets or sets the converter.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.PropertyDefinition.ConverterParameter">
            <summary>
            Gets or sets the converter parameter.
            </summary>
            <value>The converter parameter.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.PropertyDefinition.ConverterCulture">
            <summary>
            Gets or sets the converter culture.
            </summary>
            <value>The converter culture.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.PropertyDefinition.HorizontalAlignment">
            <summary>
            Gets or sets the horizontal alignment.
            </summary>
            <value>The horizontal alignment.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.PropertyDefinition.Width">
            <summary>
            Gets or sets the column width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.PropertyDefinition.MaxLength">
            <summary>
            Gets or sets the max length (for TextBox).
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.PropertyDefinition.ItemsSourceProperty">
            <summary>
            Gets or sets the property name of an items source (for ComboBox).
            </summary>
            <value>The items source property.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.PropertyDefinition.ItemsSource">
            <summary>
            Gets or sets the items source (for ComboBox).
            </summary>
            <value>The items source.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.PropertyDefinition.IsEditable">
            <summary>
            Gets or sets a value indicating whether this instance is editable (for ComboBox).
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.ItemsGrid.ItemsGrid">
            <summary>
            Represents a datagrid with a spreadsheet style.
            </summary>
            <summary>
            Properties for the ItemsGrid.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.PartAutoFillBox">
            <summary>
              The auto fill box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.PartAutoFillSelection">
            <summary>
              The auto fill selection.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.PartColumnGrid">
            <summary>
              The column grid.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.PartColumnScroller">
            <summary>
              The column scroller.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.PartColumnSelectionBackground">
            <summary>
              The column selection background.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.PartCurrentBackground">
            <summary>
              The current background.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.PartGrid">
            <summary>
              The grid.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.PartRowGrid">
            <summary>
              The row grid.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.PartRowScroller">
            <summary>
              The row scroller.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.PartRowSelectionBackground">
            <summary>
              The row selection background.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.PartSelection">
            <summary>
              The selection.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.PartSelectionBackground">
            <summary>
              The selection background.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.PartSheetGrid">
            <summary>
              The sheet grid.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.PartSheetScroller">
            <summary>
              The sheet scroller.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.PartTopLeft">
            <summary>
              The top left cell.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.cellMap">
            <summary>
              The cell map.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.autoFillBox">
            <summary>
              The auto fill box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.autoFillCell">
            <summary>
              The auto fill cell.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.autoFillSelection">
            <summary>
              The auto fill selection.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.autoFillToolTip">
            <summary>
              The auto fill tool tip.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.autoFiller">
            <summary>
              The auto filler.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.cellInsertionIndex">
            <summary>
              The cell insertion index.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.columnGrid">
            <summary>
              The column grid.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.columnScroller">
            <summary>
              The column scroller.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.columnSelectionBackground">
            <summary>
              The column selection background.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.currentBackground">
            <summary>
              The current background.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.currentEditor">
            <summary>
            The current editor.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.editingCells">
            <summary>
              The editing cells.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.endPressed">
            <summary>
              The end pressed.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.isCapturing">
            <summary>
              The is capturing.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.isSelectingColumns">
            <summary>
              The is selecting columns.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.isSelectingRows">
            <summary>
              The is selecting rows.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.rowGrid">
            <summary>
              The row grid.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.rowScroller">
            <summary>
              The row scroller.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.rowSelectionBackground">
            <summary>
              The row selection background.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.selection">
            <summary>
              The selection.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.selectionBackground">
            <summary>
              The selection background.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.sheetGrid">
            <summary>
              The sheet grid.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.sheetScroller">
            <summary>
              The sheet scroller.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.subcribedContent">
            <summary>
              The subcribed content.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.topleft">
            <summary>
              The topleft.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.ItemsGrid.ItemsGrid"/> class. 
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.AutoSizeAllColumns">
            <summary>
            The auto size all columns.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.AutoSizeColumn(System.Int32)">
            <summary>
            The auto size column.
            </summary>
            <param name="column">
            The column.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.Copy">
            <summary>
            The copy.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.Copy(System.String)">
            <summary>
            The copy.
            </summary>
            <param name="separator">
            The separator.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.DeleteItem(System.Int32,System.Boolean)">
            <summary>
            Deletes an item.
            </summary>
            <param name="index">
            The index.
            </param>
            <param name="updateGrid">
            The update grid.
            </param>
            <returns>
            The delete item.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.EndTextEdit(System.Boolean)">
            <summary>
            The end text edit.
            </summary>
            <param name="commit">
            The commit.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.GetCell(System.Windows.Point)">
            <summary>
            Gets the cell reference for the specified position.
            </summary>
            <param name="position">
            The position.
            </param>
            <returns>
            The cell ref.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.GetCellElement(PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the element at the specified cell.
            </summary>
            <param name="cellRef">
            The cell ref.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.GetCellString(PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the cell string at the specified cell.
            </summary>
            <param name="cell">
            The cell.
            </param>
            <returns>
            The cell string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.GetCellValue(PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the cell value from the Content property for the specified cell.
            </summary>
            <param name="cell">
            The cell reference.
            </param>
            <returns>
            The get cell value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.GetPosition(PropertyTools.Wpf.CellRef)">
            <summary>
            The get position.
            </summary>
            <param name="cellRef">
            The cell ref.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.GetVisibleCells(PropertyTools.Wpf.CellRef@,PropertyTools.Wpf.CellRef@)">
            <summary>
            The get visible cells.
            </summary>
            <param name="topLeft">
            The top left.
            </param>
            <param name="bottomRight">
            The bottom right.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.HideEditor">
            <summary>
            The hide editor.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.InsertItem(System.Int32,System.Boolean)">
            <summary>
            Inserts an item.
            </summary>
            <param name="index">
            The index.
            </param>
            <param name="updateGrid">
            The update grid.
            </param>
            <returns>
            The insert item.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.MoveCurrentCell(System.Int32,System.Int32)">
            <summary>
            The move current cell.
            </summary>
            <param name="deltaRows">
            The delta rows.
            </param>
            <param name="deltaColumns">
            The delta columns.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.OnApplyTemplate">
            <summary>
            The on apply template.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.Paste">
            <summary>
            The paste.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ScrollIntoView(PropertyTools.Wpf.CellRef)">
            <summary>
            The scroll into view.
            </summary>
            <param name="cellRef">
            The cell ref.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ShowEditor">
            <summary>
            The show editor.
            </summary>
            <returns>
            The show editor.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ShowTextBoxEditor">
            <summary>
            The show text box editor.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ToCsv(System.String)">
            <summary>
            The to csv.
            </summary>
            <param name="separator">
            The separator.
            </param>
            <returns>
            The to csv.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.TrySetCellValue(PropertyTools.Wpf.CellRef,System.Object)">
            <summary>
            The try set cell value.
            </summary>
            <param name="cell">
            The cell.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            The try set cell value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.CreateElement(PropertyTools.Wpf.CellRef,PropertyTools.Wpf.ItemsGrid.PropertyDefinition,System.Object)">
            <summary>
            The create element.
            </summary>
            <param name="cell">
            The cell.
            </param>
            <param name="pd">
            The pd.
            </param>
            <param name="item">
            The item.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.CreateInstance(System.Type)">
            <summary>
            The create instance.
            </summary>
            <param name="itemType">
            The item type.
            </param>
            <returns>
            The create instance.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.GeneratePropertyDefinitions(System.Collections.IEnumerable)">
            <summary>
            The generate column definitions.
            </summary>
            <param name="items">
            The items.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles KeyDown events on the grid.
            </summary>
            <param name="e">
            The event args.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The on mouse left button down.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The on mouse left button up.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            The on mouse move.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            The on preview mouse wheel.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            The on text input.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.UpdateAllCells">
            <summary>
            The update all cells.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.UpdateCellContent(PropertyTools.Wpf.CellRef)">
            <summary>
            The update cell content.
            </summary>
            <param name="cellRef">
            The cell ref.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            The clamp.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <returns>
            The clamp.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.CsvEncodeString(System.String)">
            <summary>
            The csv encode string.
            </summary>
            <param name="cell">
            The cell.
            </param>
            <returns>
            The csv encode string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.FormatValue(System.Object,System.String)">
            <summary>
            The format value.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="formatString">
            The format string.
            </param>
            <returns>
            The format value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.GetListItemType(System.Collections.IEnumerable)">
            <summary>
            The get list item type.
            </summary>
            <param name="list">
            The list.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.GetListItemType(System.Type)">
            <summary>
            The get list item type.
            </summary>
            <param name="listType">
            The list type.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.SetElementPosition(System.Windows.UIElement,PropertyTools.Wpf.CellRef)">
            <summary>
            The set element position.
            </summary>
            <param name="element">
            The element.
            </param>
            <param name="cell">
            The cell.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.TextToArray(System.String)">
            <summary>
            The text to array.
            </summary>
            <param name="text">
            The text.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ToTextAlignment(System.Windows.HorizontalAlignment)">
            <summary>
            Convert a HorizontalAlignment to a TextAlignment.
            </summary>
            <param name="a">
            The a.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.TryConvert(System.Object,System.Type,System.Object@)">
            <summary>
            The try convert.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="targetType">
            The target type.
            </param>
            <param name="convertedValue">
            The converted value.
            </param>
            <returns>
            The try convert.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.AddCellElement(PropertyTools.Wpf.CellRef,System.Object)">
            <summary>
            The add cell element.
            </summary>
            <param name="cellRef">
            The cell ref.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.AddItemCellMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The add item cell mouse left button down.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.AutoFillBoxMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The auto fill box mouse left button down.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.BuildContextMenus">
            <summary>
            The build context menus.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.CellChecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The cell checked.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ColumnGridLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The column grid loaded.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ColumnGridMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The column grid mouse left button down.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ColumnGridMouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The column grid mouse left button up.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ColumnGridMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            The column grid mouse move.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ColumnGridSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            The column grid size changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ColumnScrollerChanged(System.Object,System.Windows.Controls.ScrollChangedEventArgs)">
            <summary>
            The column scroller changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ColumnSplitterChangeCompleted(System.Object,System.Windows.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            The column splitter change completed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="dragCompletedEventArgs">
            The drag completed event args.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ColumnSplitterChangeDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            The column splitter change delta.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ColumnSplitterChangeStarted(System.Object,System.Windows.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            The column splitter change started.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="dragStartedEventArgs">
            The drag started event args.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ColumnSplitterDoubleClick(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The column splitter double click.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.CopyExecute(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            The copy execute.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.CutExecute(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            The cut execute.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.Delete">
            <summary>
            The delete.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.DeleteExecute(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            The delete execute.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.DeleteRows">
            <summary>
            The delete rows.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.EnumerateItems(PropertyTools.Wpf.CellRef,PropertyTools.Wpf.CellRef)">
            <summary>
            Enumerate the items in the specified cell range.
              This is used to updated the SelectedItems property.
            </summary>
            <param name="cell0">
            The cell 0.
            </param>
            <param name="cell1">
            The cell 1.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.FindNext(System.Int32@,System.Int32@,System.Int32,System.Int32)">
            <summary>
            The find next.
            </summary>
            <param name="row">
            The row.
            </param>
            <param name="column">
            The column.
            </param>
            <param name="deltaRow">
            The delta row.
            </param>
            <param name="deltaColumn">
            The delta column.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.GetCellRefFromUIElement(System.Windows.UIElement)">
            <summary>
            The get cell ref from ui element.
            </summary>
            <param name="element">
            The element.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.GetColumnElement(System.Int32)">
            <summary>
            Gets the column element for the specified column.
            </summary>
            <param name="column">
            The column.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.GetColumnHeader(System.Int32)">
            <summary>
            The get column header.
            </summary>
            <param name="j">
            The j.
            </param>
            <returns>
            The get column header.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.GetColumnWidth(System.Int32)">
            <summary>
            The get column width.
            </summary>
            <param name="i">
            The i.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.GetFormatString(PropertyTools.Wpf.CellRef,System.Object)">
            <summary>
            The get format string.
            </summary>
            <param name="cell">
            The cell.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            The get format string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.GetItem(PropertyTools.Wpf.CellRef)">
            <summary>
            The get item.
            </summary>
            <param name="cell">
            The cell.
            </param>
            <returns>
            The get item.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.GetItemIndex(PropertyTools.Wpf.CellRef)">
            <summary>
            The get item index.
            </summary>
            <param name="cell">
            The cell.
            </param>
            <returns>
            The get item index.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.GetPropertyDefinition(PropertyTools.Wpf.CellRef)">
            <summary>
            The get property definition.
            </summary>
            <param name="cell">
            The cell.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.GetPropertyIndex(PropertyTools.Wpf.CellRef)">
            <summary>
            The get field index.
            </summary>
            <param name="cell">
            The cell.
            </param>
            <returns>
            The get field index.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.GetRowHeader(System.Int32)">
            <summary>
            The get row header.
            </summary>
            <param name="j">
            The j.
            </param>
            <returns>
            The get row header.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.HandleButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The handle button down.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.InsertCellElement(PropertyTools.Wpf.CellRef,System.Object,System.Boolean)">
            <summary>
            The insert cell element.
            </summary>
            <param name="cellRef">
            The cell ref.
            </param>
            <param name="value">
            The value.
            </param>
            <param name="insert">
            The insert.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.InsertRows">
            <summary>
            The insert rows.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.OnContentCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            The on content collection changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.PasteExecute(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            The paste execute.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.RowGridMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The row grid mouse left button down.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.RowGridMouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The row grid mouse left button up.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.RowGridMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            The row grid mouse move.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.RowScrollerChanged(System.Object,System.Windows.Controls.ScrollChangedEventArgs)">
            <summary>
            The row scroller changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ScrollViewerScrollChanged(System.Object,System.Windows.Controls.ScrollChangedEventArgs)">
            <summary>
            The scroll viewer scroll changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.SelectAll">
            <summary>
            The select all.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.SelectionToString(System.String,System.Boolean)">
            <summary>
            The selection to string.
            </summary>
            <param name="separator">
            The separator.
            </param>
            <param name="encode">
            The encode.
            </param>
            <returns>
            The selection to string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.SetCheckInSelectedCells(System.Boolean)">
            <summary>
            The set check in selected cells.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The set check in selected cells.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.SheetMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The sheet mouse left button down.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.SheetToString(System.String,System.Boolean)">
            <summary>
            The sheet to string.
            </summary>
            <param name="separator">
            The separator.
            </param>
            <param name="encode">
            The encode.
            </param>
            <returns>
            The sheet to string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.SubscribeToNotifications">
            <summary>
            The subscribe notifications.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.TextEditorLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The text editor lost focus.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.TextEditorLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The text editor was loaded.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.TextEditorPreviewKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            Handles keydown events in the TextBox editor.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ToString(PropertyTools.Wpf.CellRef,PropertyTools.Wpf.CellRef,System.String,System.Boolean)">
            <summary>
            The to string.
            </summary>
            <param name="cell1">
            The cell 1.
            </param>
            <param name="cell2">
            The cell 2.
            </param>
            <param name="separator">
            The separator.
            </param>
            <param name="encode">
            The encode.
            </param>
            <returns>
            The to string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ToggleCheck">
            <summary>
            The toggle check.
            </summary>
            <returns>
            The toggle check.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.TopleftMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The topleft mouse left button down.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.UnsubscribeNotifications">
            <summary>
            The unsubscribe notifications.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.UpdateCells(System.Int32,System.Int32)">
            <summary>
            The update sheet.
            </summary>
            <param name="rows">
            The rows.
            </param>
            <param name="columns">
            The columns.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.UpdateColumnWidths">
            <summary>
            The update column widths.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.UpdateColumns(System.Int32)">
            <summary>
            The update columns.
            </summary>
            <param name="columns">
            The columns.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.UpdateGridContent">
            <summary>
            Updates all the UIElements of the grid (both cells, headers, row and column lines).
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.UpdateRows(System.Int32)">
            <summary>
            The update rows.
            </summary>
            <param name="rows">
            The rows.
            </param>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.AddItemHeaderProperty">
            <summary>
              The add item header property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.AlternatingRowsBackgroundProperty">
            <summary>
              The alternating rows background property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.AutoGenerateColumnsProperty">
            <summary>
              The auto generate columns property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.AutoSizeColumnsProperty">
            <summary>
              The auto size columns property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.CanDeleteProperty">
            <summary>
              The can delete property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.CanInsertProperty">
            <summary>
              The can insert property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.CanResizeColumnsProperty">
            <summary>
              The can resize columns property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ContentProperty">
            <summary>
              The content property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ControlFactoryProperty">
            <summary>
            The control factory property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.CurrentCellProperty">
            <summary>
              The current cell property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.DefaultColumnWidthProperty">
            <summary>
              The default column width property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.DefaultHorizontalAlignmentProperty">
            <summary>
              The default horizontal alignment property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.DefaultRowHeightProperty">
            <summary>
              The default row height property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.EasyInsertProperty">
            <summary>
              The easy insert property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.GridLineBrushProperty">
            <summary>
              The grid line brush property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.HeaderBorderBrushProperty">
            <summary>
              The header border brush property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.IsVirtualizingProperty">
            <summary>
              The is virtualizing property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ItemHeaderPropertyPathProperty">
            <summary>
            The item header property path property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ItemsInColumnsProperty">
            <summary>
              The items in columns property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.RowHeaderWidthProperty">
            <summary>
              The row header width property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.RowHeadersProperty">
            <summary>
              The row headers property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.SelectedItemsProperty">
            <summary>
              The selected items property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.SelectionCellProperty">
            <summary>
              The selection cell property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsGrid.ItemsGrid.propertyDefinitions">
            <summary>
              The column definitions.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.CoerceCurrentCell(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the current cell.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="basevalue">
            The basevalue.
            </param>
            <returns>
            The coerced current cell.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.CoerceSelectionCell(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the selection cell.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="basevalue">
            The basevalue.
            </param>
            <returns>
            The coerced selection cell.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ContentChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The content changed.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.CurrentCellChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The current cell changed.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.SelectionCellChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The selection cell changed.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.OnCurrentCellChanged">
            <summary>
            The on current cell changed.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.OnSelectedCellsChanged">
            <summary>
            The selected cells changed.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGrid.OnSelectionCellChanged">
            <summary>
            The on selection cell changed.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.AddItemHeader">
            <summary>
              Gets or sets the header used for the add item row/column. Default is "*".
            </summary>
            <value>The add item header.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.AlternatingRowsBackground">
            <summary>
              Gets or sets the alternating rows background brush.
            </summary>
            <value>The alternating rows background.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.AutoFillCell">
            <summary>
              Gets or sets the auto fill cell.
            </summary>
            <value>The auto fill cell.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.AutoGenerateColumns">
            <summary>
              Gets or sets a value indicating whether to auto generate columns.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.AutoSizeColumns">
            <summary>
              Gets or sets a value indicating whether auto size columns is enabled.
            </summary>
            <value><c>true</c> if [auto size columns]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.CanDelete">
            <summary>
              Gets or sets a value indicating whether this instance can delete.
            </summary>
            <value>
              <c>true</c> if this instance can delete; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.CanInsert">
            <summary>
              Gets or sets a value indicating whether this instance can insert.
            </summary>
            <value>
              <c>true</c> if this instance can insert; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.CanResizeColumns">
            <summary>
              Gets or sets a value indicating whether this instance can resize columns.
            </summary>
            <value>
              <c>true</c> if this instance can resize columns; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.Content">
            <summary>
              Gets or sets the content of the grid.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ControlFactory">
            <summary>
            Gets or sets ControlFactory.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.CurrentCell">
            <summary>
              Gets or sets the current cell.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.DefaultColumnWidth">
            <summary>
              Gets or sets the default column width.
            </summary>
            <value>The default width of the column.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.DefaultHorizontalAlignment">
            <summary>
              Gets or sets the default horizontal alignment.
            </summary>
            <value>The default horizontal alignment.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.DefaultRowHeight">
            <summary>
              Gets or sets the default height of the row.
            </summary>
            <value>The default height of the row.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.EasyInsert">
            <summary>
              Gets or sets a value indicating whether to allow easy insert mode.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.GridLineBrush">
            <summary>
              Gets or sets the grid line brush.
            </summary>
            <value>The grid line brush.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.HeaderBorderBrush">
            <summary>
              Gets or sets the header border brush.
            </summary>
            <value>The header border brush.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ItemHeaderPropertyPath">
            <summary>
            Gets or sets ItemHeaderPropertyPath.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.ItemsInColumns">
            <summary>
              Gets or sets a value indicating whether to use columns for the items.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.PropertyDefinitions">
            <summary>
              Gets the column definitions.
            </summary>
            <value>The column definitions.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.RowHeaderWidth">
            <summary>
              Gets or sets the width of the row header.
            </summary>
            <value>The width of the row header.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.RowHeaders">
            <summary>
              Gets or sets the row headers.
            </summary>
            <value>The row headers.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.SelectedCells">
            <summary>
              Gets the selected cells.
            </summary>
            <value>The selected cells.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.SelectedItems">
            <summary>
              Gets or sets the selected items.
            </summary>
            <value>The selected items.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.SelectionCell">
            <summary>
              Gets or sets the cell defining the selection area.
              The selection area is defined by the CurrentCell and SelectionCell.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.CanDeleteColumns">
            <summary>
              Gets a value indicating whether this instance can delete columns.
            </summary>
            <value>
              <c>true</c> if this instance can delete columns; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.CanDeleteRows">
            <summary>
              Gets a value indicating whether this instance can delete rows.
            </summary>
            <value>
              <c>true</c> if this instance can delete rows; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.CanInsertColumns">
            <summary>
              Gets a value indicating whether this instance can insert columns.
            </summary>
            <value>
              <c>true</c> if this instance can insert columns; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.CanInsertRows">
            <summary>
              Gets a value indicating whether this instance can insert rows.
            </summary>
            <value>
              <c>true</c> if this instance can insert rows; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.Columns">
            <summary>
              Gets or sets the number of columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsGrid.ItemsGrid.Rows">
            <summary>
              Gets or sets the number of rows.
            </summary>
            <value>The rows.</value>
        </member>
        <member name="T:PropertyTools.Wpf.ItemsGrid.ItemsGridControlFactory">
            <summary>
            Creates display and edit controls for the ItemsGrid.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGridControlFactory.CreateDisplayControl(PropertyTools.Wpf.ItemsGrid.PropertyDefinition,System.Object)">
            <summary>
            Creates the display control.
            </summary>
            <param name="property">The property.</param>
            <param name="instance">The instance.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGridControlFactory.CreateEditControl(PropertyTools.Wpf.ItemsGrid.PropertyDefinition,System.Object)">
            <summary>
            Creates the edit control.
            </summary>
            <param name="property">The property.</param>
            <param name="instance">The instance.</param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGridControlFactory.CreateTextBlockControl(PropertyTools.Wpf.ItemsGrid.PropertyDefinition)">
            <summary>
            Creates the text block control.
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGridControlFactory.CreateCheckBoxControl(PropertyTools.Wpf.ItemsGrid.PropertyDefinition)">
            <summary>
            Creates the check box control.
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGridControlFactory.CreateColorPickerControl(PropertyTools.Wpf.ItemsGrid.PropertyDefinition)">
            <summary>
            Creates the color picker control.
            </summary>
            <param name="property">The property.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGridControlFactory.CreateComboBox(PropertyTools.Wpf.ItemsGrid.PropertyDefinition)">
            <summary>
            Creates the combo box.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsGrid.ItemsGridControlFactory.CreateTextBox(PropertyTools.Wpf.ItemsGrid.PropertyDefinition)">
            <summary>
            Creates the text box.
            </summary>
            <param name="d">The d.</param>
            <returns></returns>
        </member>
        <member name="T:PropertyTools.Wpf.AboutViewModel">
            <summary>
            Represents a viewmodel for the about dialog.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.AboutViewModel.#ctor(System.Reflection.Assembly)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.AboutViewModel"/> class.
            </summary>
            <param name="a">
            An assembly.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.AboutViewModel.GetReport">
            <summary>
            Gets the report.
            </summary>
            <returns>
            The get report.
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.AssemblyVersion">
            <summary>
              Gets AssemblyVersion.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.BuildTime">
            <summary>
              Gets BuildTime.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.CLRversion">
            <summary>
              Gets CLRversion.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.Comments">
            <summary>
              Gets Comments.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.Company">
            <summary>
              Gets Company.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.CopyReportText">
            <summary>
              Gets or sets the copy report text.
            </summary>
            <value>The copy report text.</value>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.Copyright">
            <summary>
              Gets Copyright.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.Domain">
            <summary>
              Gets Domain.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.FileInfo">
            <summary>
              Gets or sets the file info.
            </summary>
            <value>The file info.</value>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.FileName">
            <summary>
              Gets FileName.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.FileVersion">
            <summary>
              Gets FileVersion.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.FileVersionInfo">
            <summary>
              Gets or sets the file version info.
            </summary>
            <value>The file version info.</value>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.Image">
            <summary>
              Gets or sets Image.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.MachineName">
            <summary>
              Gets MachineName.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.OSVersion">
            <summary>
              Gets OSVersion.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.Platform">
            <summary>
              Gets Platform.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.Processors">
            <summary>
              Gets Processors.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.ProductName">
            <summary>
              Gets ProductName.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.ServicePack">
            <summary>
              Gets ServicePack.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.SystemInfoText">
            <summary>
              Gets or sets the system info text.
            </summary>
            <value>The system info text.</value>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.UpdateStatus">
            <summary>
              Gets or sets UpdateStatus.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.User">
            <summary>
              Gets User.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutViewModel.Version">
            <summary>
              Gets Version.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.ReflectionExtensions">
            <summary>
            The reflection extensions.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ReflectionExtensions.FilterOnBrowsableAttribute``1(``0)">
            <summary>
            Filters on the browsable attribute.
            </summary>
            <typeparam name="T">
            </typeparam>
            <param name="arr">
            The arr.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ReflectionExtensions.GetCustomAttributes``1(System.Reflection.FieldInfo,System.Boolean)">
            <summary>
            The get custom attributes.
            </summary>
            <param name="fieldInfo">
            The field info.
            </param>
            <param name="inherit">
            The inherit.
            </param>
            <typeparam name="T">
            </typeparam>
            <returns>
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ObjectToDoubleConverter">
            <summary>
            Converts <see cref="T:System.Object"/> instances to <see cref="T:System.Double"/> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ObjectToDoubleConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value produced by the binding source.
            </param>
            <param name="targetType">
            The type of the binding target property.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ObjectToDoubleConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value that is produced by the binding target.
            </param>
            <param name="targetType">
            The type to convert to.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ValueToBooleanConverter">
            <summary>
            Converts <see cref="T:System.Object"/> instances to <see cref="T:System.Boolean"/> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ValueToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value produced by the binding source.
            </param>
            <param name="targetType">
            The type of the binding target property.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ValueToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value that is produced by the binding target.
            </param>
            <param name="targetType">
            The type to convert to.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.AboutDialog">
            <summary>
            Represents an about dialog.
            </summary>
            <summary>
            AboutDialog
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.AboutDialog.vm">
            <summary>
              The vm.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.AboutDialog.#ctor(System.Windows.Window)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.AboutDialog"/> class.
            </summary>
            <param name="owner">
            The owner.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.AboutDialog.CopyClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The copy click.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.AboutDialog.OkClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The ok click.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.AboutDialog.SystemInfoClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The system info click.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.AboutDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.AboutDialog.Image">
            <summary>
              Sets the image used in the about dialog.
              Example:
              d.Image = new BitmapImage(new Uri(@"pack://application:,,,/AssemblyName;component/Images/about.png"));
            </summary>
            <value>The image.</value>
        </member>
        <member name="P:PropertyTools.Wpf.AboutDialog.UpdateStatus">
            <summary>
              Sets the update status.
            </summary>
            <value>The update status.</value>
        </member>
        <member name="T:PropertyTools.Wpf.Shell32.BrowseForFolderDialog">
            <summary>
            Represents a common dialog box (Win32::SHBrowseForFolder()) that allows a user to select a folder.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.browseInfo">
            <summary>
              The browse info.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.Shell32.BrowseForFolderDialog"/> class. 
              Constructs a BrowseForFolderDialog with default BrowseInfoFlags set to BIF_NEWDIALOGSTYLE.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.SendMessageW(System.IntPtr,System.UInt32,System.IntPtr,System.IntPtr)">
            <summary>
            The send message w.
            </summary>
            <param name="hWnd">
            The h wnd.
            </param>
            <param name="Msg">
            The msg.
            </param>
            <param name="wParam">
            The w param.
            </param>
            <param name="lParam">
            The l param.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.SendMessageW(System.IntPtr,PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser,System.IntPtr,System.String)">
            <summary>
            The send message w.
            </summary>
            <param name="hWnd">
            The h wnd.
            </param>
            <param name="msg">
            The msg.
            </param>
            <param name="wParam">
            The w param.
            </param>
            <param name="str">
            The str.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.ShowDialog">
            <summary>
            Shows the dialog (Win32::SHBrowseForFolder()).
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.ShowDialog(System.Windows.Window)">
            <summary>
            Shows the dialog (Win32::SHBrowseForFolder()) with its hwndOwner set to the handle of 'owner'.
            </summary>
            <param name="owner">
            The owner.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.SHBrowseForFolderW(PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW)">
            <summary>
            The sh browse for folder w.
            </summary>
            <param name="bi">
            The bi.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.SHGetPathFromIDList(System.IntPtr,System.Text.StringBuilder)">
            <summary>
            The sh get path from id list.
            </summary>
            <param name="pidl">
            The pidl.
            </param>
            <param name="path">
            The path.
            </param>
            <returns>
            The sh get path from id list.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseEventHandler(System.IntPtr,PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageFromBrowser,System.IntPtr,System.IntPtr)">
            <summary>
            The browse event handler.
            </summary>
            <param name="hwnd">
            The hwnd.
            </param>
            <param name="uMsg">
            The u msg.
            </param>
            <param name="lParam">
            The l param.
            </param>
            <param name="lpData">
            The lp data.
            </param>
            <returns>
            The browse event handler.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.PInvokeSHBrowseForFolder(System.Windows.Window)">
            <summary>
            The p invoke sh browse for folder.
            </summary>
            <param name="owner">
            The owner.
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfo">
            <summary>
              Provides direct access to the Win32::SHBrowseForFolder() BROWSEINFO structure used to create the dialog in ShowDialog().
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowserDialogFlags">
            <summary>
              Provides direct access to the ulFlags field of the Win32::SHBrowseForFolder() structure used to create the dialog in ShowDialog().
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.InitialExpandedFolder">
            <summary>
              Gets or sets the initially selected and expanded folder path.  Overrides SelectedFolder.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.InitialFolder">
            <summary>
              Gets or sets the initially selected folder path.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.OKButtonText">
            <summary>
              Gets or sets the text for the dialog's OK button.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.SelectedFolder">
            <summary>
              Gets the current and or final selected folder path.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.Title">
            <summary>
              Gets or sets the string that is displayed above the tree view control in the dialog box (must set BEFORE calling ShowDialog()).
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseCallbackProc">
            <summary>
            The browse callback proc.
            </summary>
            <param name="hwnd">
            The hwnd.
            </param>
            <param name="uMsg">
            The u msg.
            </param>
            <param name="lParam">
            The l param.
            </param>
            <param name="lpData">
            The lp data.
            </param>
        </member>
        <member name="T:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags">
            <summary>
            The browse info flags.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_None">
            <summary>
              No specified BIF_xxx flags.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_RETURNONLYFSDIRS">
            <summary>
              Only return file system directories. If the user selects folders that are not part of the file system, the OK button is grayed.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_DONTGOBELOWDOMAIN">
            <summary>
              Do not include network folders below the domain level in the dialog box's tree view control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_STATUSTEXT">
            <summary>
              Include a status area in the dialog box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_RETURNFSANCESTORS">
            <summary>
              Only return file system ancestors. An ancestor is a subfolder that is beneath the root folder in the namespace hierarchy.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_EDITBOX">
            <summary>
              Include an edit control in the browse dialog box that allows the user to type the name of an item.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_VALIDATE">
            <summary>
              If the user types an invalid name into the edit box, the browse dialog box will call the application's BrowseCallbackProc with the BFFM_VALIDATEFAILED message.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_NEWDIALOGSTYLE">
            <summary>
              Use the new user interface. Setting this flag provides the user with a larger dialog box that can be resized.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_USENEWUI">
            <summary>
              Use the new user interface, including an edit box. This flag is equivalent to BIF_EDITBOX | BIF_NEWDIALOGSTYLE.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_BROWSEINCLUDEURLS">
            <summary>
              The browse dialog box can display URLs. The BIF_USENEWUI and BIF_BROWSEINCLUDEFILES flags must also be set.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_UAHINT">
            <summary>
              When combined with BIF_NEWDIALOGSTYLE, adds a usage hint to the dialog box in place of the edit box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_NONEWFOLDERBUTTON">
            <summary>
              Do not include the New Folder button in the browse dialog box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_NOTRANSLATETARGETS">
            <summary>
              When the selected item is a shortcut, return the PIDL of the shortcut itself rather than its target.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_BROWSEFORCOMPUTER">
            <summary>
              Only return computers. If the user selects anything other than a computer, the OK button is grayed.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_BROWSEFORPRINTER">
            <summary>
              Only allow the selection of printers. If the user selects anything other than a printer, the OK button is grayed.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_BROWSEINCLUDEFILES">
            <summary>
              The browse dialog box will display files as well as folders.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BrowseInfoFlags.BIF_SHAREABLE">
            <summary>
              The browse dialog box can display shareable resources on remote systems.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageFromBrowser">
            <summary>
            The message from browser.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageFromBrowser.BFFM_INITIALIZED">
            <summary>
              The dialog box has finished initializing.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageFromBrowser.BFFM_SELCHANGED">
            <summary>
              The selection has changed in the dialog box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageFromBrowser.BFFM_VALIDATEFAILEDA">
            <summary>
              (ANSI) The user typed an invalid name into the dialog's edit box. A nonexistent folder is considered an invalid name.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageFromBrowser.BFFM_VALIDATEFAILEDW">
            <summary>
              (Unicode) The user typed an invalid name into the dialog's edit box. A nonexistent folder is considered an invalid name.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageFromBrowser.BFFM_IUNKNOWN">
            <summary>
              An IUnknown interface is available to the dialog box.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser">
            <summary>
            The message to browser.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser.WM_USER">
            <summary>
              Win32 API macro - start of user defined window message range.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_SETSTATUSTEXTA">
            <summary>
              (ANSI) Sets the status text. Set lpData to point to a null-terminated string with the desired text.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_ENABLEOK">
            <summary>
              Enables or disables the dialog box's OK button.  lParam - To enable, set to a nonzero value. To disable, set to zero.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_SETSELECTIONA">
            <summary>
              (ANSI) Specifies the path of a folder to select.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_SETSELECTIONW">
            <summary>
              (Unicode) Specifies the path of a folder to select.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_SETSTATUSTEXTW">
            <summary>
              (Unicode) Sets the status text. Set lpData to point to a null-terminated string with the desired text.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_SETOKTEXT">
            <summary>
              Sets the text that is displayed on the dialog box's OK button.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.MessageToBrowser.BFFM_SETEXPANDED">
            <summary>
              Specifies the path of a folder to expand in the Browse dialog box.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW">
            <summary>
            The browseinfow.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW.hwndOwner">
            <summary>
              A handle to the owner window for the dialog box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW.pidlRoot">
            <summary>
              A pointer to an item identifier list (PIDL) specifying the location of the root folder from which to start browsing.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW.pszDisplayName">
            <summary>
              The address of a buffer to receive the display name of the folder selected by the user. The size of this buffer is assumed to be MAX_PATH characters.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW.lpszTitle">
            <summary>
              The address of a null-terminated string that is displayed above the tree view control in the dialog box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW.ulFlags">
            <summary>
              Flags specifying the options for the dialog box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW.lpfn">
            <summary>
              A BrowseCallbackProc delegate that the dialog box calls when an event occurs.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW.lParam">
            <summary>
              An application-defined value that the dialog box passes to the BrowseCallbackProc delegate, if one is specified.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.Shell32.BrowseForFolderDialog.BROWSEINFOW.iImage">
            <summary>
              A variable to receive the image associated with the selected folder. The image is specified as an index to the system image list.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.ColorHelper">
            <summary>
            Static <see cref="T:System.Windows.Media.Color"/> helper methods.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.#cctor">
            <summary>
              Initializes static members of the <see cref="T:PropertyTools.Wpf.ColorHelper"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.ChangeAlpha(System.Windows.Media.Color,System.Byte)">
            <summary>
            Change the alpha value of a color.
            </summary>
            <param name="c">
            The source color.
            </param>
            <param name="alpha">
            The new alpha value.
            </param>
            <returns>
            The new color.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.CmykToColor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Converts CMYK values to a <see cref="T:System.Windows.Media.Color"/>.
            </summary>
            <param name="c">
            The cyan value.
            </param>
            <param name="m">
            The magenta value.
            </param>
            <param name="y">
            The yellow value.
            </param>
            <param name="k">
            The black value.
            </param>
            <returns>
            The color.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.ColorDifference(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Calculates the difference between two <see cref="T:System.Windows.Media.Color"/>s.
            </summary>
            <param name="c1">
            The first color.
            </param>
            <param name="c2">
            The second color.
            </param>
            <returns>
            L2-norm in RGBA space.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.ColorToCmyk(System.Byte,System.Byte,System.Byte)">
            <summary>
            Converts RGB values to CMYK.
            </summary>
            <param name="r">
            The r.
            </param>
            <param name="g">
            The g.
            </param>
            <param name="b">
            The b.
            </param>
            <returns>
            The CMYK values.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.ColorToHex(System.Windows.Media.Color)">
            <summary>
            Convert a <see cref="T:System.Windows.Media.Color"/> to a hexadecimal string.
            </summary>
            <param name="color">
            The source color.
            </param>
            <returns>
            The color to hex.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.ColorToHsv(System.Windows.Media.Color)">
            <summary>
            Converts from a <see cref="T:System.Windows.Media.Color"/> to HSV values (double)
            </summary>
            <param name="color">
            The source color.
            </param>
            <returns>
            Array of [Hue,Saturation,Value] in the range [0,1]
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.ColorToHsvBytes(System.Windows.Media.Color)">
            <summary>
            Converts from a <see cref="T:System.Windows.Media.Color"/> to HSV values (byte)
            </summary>
            <param name="color">
            The source color.
            </param>
            <returns>
            Array of [Hue,Saturation,Value] in the range [0,255]
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.ColorToUint(System.Windows.Media.Color)">
            <summary>
            Convert a <see cref="T:System.Windows.Media.Color"/> to unsigned int
            </summary>
            <param name="c">
            The source color.
            </param>
            <returns>
            The color to uint.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.Complementary(System.Windows.Media.Color)">
            <summary>
            Calculates the complementary color.
            </summary>
            <param name="c">
            The source color.
            </param>
            <returns>
            The complementary color.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.GetSpectrumColors(System.Int32)">
            <summary>
            Gets the hue spectrum colors.
            </summary>
            <param name="colorCount">
            The number of colors.
            </param>
            <returns>
            The spectrum.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.HexToColor(System.String)">
            <summary>
            Convert a hexadecimal string to <see cref="T:System.Windows.Media.Color"/>.
            </summary>
            <param name="value">
            The hex input string.
            </param>
            <returns>
            The color.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.HsvToColor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Converts from HSV to a RGB <see cref="T:System.Windows.Media.Color"/>.
            </summary>
            <param name="hue">
            The hue.
            </param>
            <param name="saturation">
            The saturation.
            </param>
            <param name="value">
            The value.
            </param>
            <param name="alpha">
            The alpha.
            </param>
            <returns>
            The color.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.HsvToColor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Convert from HSV to <see cref="T:System.Windows.Media.Color"/>.
              http://en.wikipedia.org/wiki/HSL_color_space
            </summary>
            <param name="hue">
            The Hue value [0,1].
            </param>
            <param name="sat">
            The saturation value [0,1].
            </param>
            <param name="val">
            The brightness value [0,1].
            </param>
            <param name="alpha">
            The alpha value [0.1].
            </param>
            <returns>
            The color.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.HueDifference(System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Calculate the difference in hue between two <see cref="T:System.Windows.Media.Color"/>s.
            </summary>
            <param name="c1">
            The first color.
            </param>
            <param name="c2">
            The second color.
            </param>
            <returns>
            The hue difference.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.Interpolate(System.Windows.Media.Color,System.Windows.Media.Color,System.Double)">
            <summary>
            Linear interpolation between two <see cref="T:System.Windows.Media.Color"/>s.
            </summary>
            <param name="c0">
            The first color.
            </param>
            <param name="c1">
            The second color.
            </param>
            <param name="x">
            The interpolation factor.
            </param>
            <returns>
            The interpolated color.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorHelper.UIntToColor(System.UInt32)">
            <summary>
            Convert an unsigned int (32bit) to <see cref="T:System.Windows.Media.Color"/>.
            </summary>
            <param name="color">
            The unsigned integer.
            </param>
            <returns>
            The color.
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.ColorHelper.Automatic">
            <summary>
              Gets the automatic color.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColorHelper.UndefinedColor">
            <summary>
              Gets the undefined color.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.RadioButtonList">
            <summary>
            Represents a control that shows a list of radiobuttons.
            </summary>
            <remarks>
            See http://bea.stollnitz.com/blog/?p=28 and http://code.msdn.microsoft.com/wpfradiobuttonlist
            </remarks>
        </member>
        <member name="F:PropertyTools.Wpf.RadioButtonList.PartPanel">
            <summary>
              The part panel.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.RadioButtonList.DescriptionConverterProperty">
            <summary>
            The description converter property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.RadioButtonList.EnumTypeProperty">
            <summary>
              The enum type property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.RadioButtonList.ItemMarginProperty">
            <summary>
              The item margin property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.RadioButtonList.ItemPaddingProperty">
            <summary>
              The item padding property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.RadioButtonList.OrientationProperty">
            <summary>
              The orientation property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.RadioButtonList.ValueProperty">
            <summary>
              The value property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.RadioButtonList.panel">
            <summary>
              The panel.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.RadioButtonList.#cctor">
            <summary>
              Initializes static members of the <see cref="T:PropertyTools.Wpf.RadioButtonList"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.RadioButtonList.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.RadioButtonList"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.RadioButtonList.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/> .
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.RadioButtonList.ValueChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the Value changed or the EnumType changed.
            </summary>
            <param name="sender">
            The sender. 
            </param>
            <param name="e">
            The event args. 
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.RadioButtonList.RadioButtonListDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The radio button list data context changed.
            </summary>
            <param name="sender">
            The sender. 
            </param>
            <param name="e">
            The event args. 
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.RadioButtonList.UpdateContent">
            <summary>
            Updates the content.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.RadioButtonList.DescriptionConverter">
            <summary>
              Gets or sets the description converter.
            </summary>
            <value> The description converter. </value>
        </member>
        <member name="P:PropertyTools.Wpf.RadioButtonList.EnumType">
            <summary>
              Gets or sets the type of the enum.
            </summary>
            <value> The type of the enum. </value>
        </member>
        <member name="P:PropertyTools.Wpf.RadioButtonList.ItemMargin">
            <summary>
              Gets or sets the item margin.
            </summary>
            <value> The item margin. </value>
        </member>
        <member name="P:PropertyTools.Wpf.RadioButtonList.ItemPadding">
            <summary>
              Gets or sets the item padding.
            </summary>
            <value> The item padding. </value>
        </member>
        <member name="P:PropertyTools.Wpf.RadioButtonList.Orientation">
            <summary>
              Gets or sets the orientation.
            </summary>
            <value> The orientation. </value>
        </member>
        <member name="P:PropertyTools.Wpf.RadioButtonList.Value">
            <summary>
              Gets or sets the value.
            </summary>
            <value> The value. </value>
        </member>
        <member name="T:PropertyTools.Wpf.BrushToColorConverter">
            <summary>
            Converts <see cref="T:System.Windows.Media.Brush"/> instances to <see cref="T:System.Windows.Media.Color"/> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.BrushToColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value produced by the binding source.
            </param>
            <param name="targetType">
            The type of the binding target property.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.BrushToColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value that is produced by the binding target.
            </param>
            <param name="targetType">
            The type to convert to.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ColorToBrushConverter">
            <summary>
            Converts <see cref="T:System.Windows.Media.Color"/> instances to <see cref="T:System.Windows.Media.Brush"/> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorToBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value produced by the binding source.
            </param>
            <param name="targetType">
            The type of the binding target property.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorToBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value that is produced by the binding target.
            </param>
            <param name="targetType">
            The type to convert to.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ColorToHexConverter">
            <summary>
            Converts <see cref="T:System.Windows.Media.Color"/> instances to hex <see cref="T:System.String"/> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColorToHexConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value produced by the binding source.
            </param>
            <param name="targetType">
            The type of the binding target property.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColorToHexConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value that is produced by the binding target.
            </param>
            <param name="targetType">
            The type to convert to.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.EnumToBooleanConverter">
            <summary>
            Enum to Boolean converter
              Usage 'Converter={StaticResource EnumToBooleanConverter}, ConverterParameter={x:Static value...}'
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.EnumToBooleanConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value produced by the binding source.
            </param>
            <param name="targetType">
            The type of the binding target property.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.EnumToBooleanConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value that is produced by the binding target.
            </param>
            <param name="targetType">
            The type to convert to.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.EnumToBooleanConverter.EnumType">
            <summary>
              Gets or sets the type of the enum.
            </summary>
            <value>The type of the enum.</value>
        </member>
        <member name="T:PropertyTools.Wpf.EnumValuesConverter">
            <summary>
            Converts an Enum to a list of the enum type values
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.EnumValuesConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value produced by the binding source.
            </param>
            <param name="targetType">
            The type of the binding target property.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.EnumValuesConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value that is produced by the binding target.
            </param>
            <param name="targetType">
            The type to convert to.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.SelfProvider">
            <summary>
            The self provider.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SelfProvider.ProvideValue(System.IServiceProvider)">
            <summary>
            The provide value.
            </summary>
            <param name="serviceProvider">
            The service provider.
            </param>
            <returns>
            The provide value.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.WizardDialog">
            <summary>
            Represents a wizard dialog.
            </summary>
            <summary>
            WizardDialog
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.WizardDialog.CurrentPageProperty">
            <summary>
              The current page property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.WizardDialog.PagesProperty">
            <summary>
              The pages property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.WizardDialog.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.WizardDialog"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.WizardDialog.CurrentPage_Changed(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The current page_ changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.WizardDialog.BackButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The back button_ click.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.WizardDialog.BindPage">
            <summary>
            The bind page.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.WizardDialog.CancelButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The cancel button_ click.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.WizardDialog.FinishButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The finish button_ click.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.WizardDialog.NextButton_Click(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The next button_ click.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.WizardDialog.WizardDialog_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The wizard dialog_ loaded.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.WizardDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.WizardDialog.CurrentPage">
            <summary>
              Gets or sets CurrentPage.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.WizardDialog.Pages">
            <summary>
              Gets or sets Pages.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.PasswordHelper">
            <summary>
            The password helper.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PasswordHelper.AttachProperty">
            <summary>
              The attach property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PasswordHelper.PasswordProperty">
            <summary>
              The password property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PasswordHelper.IsUpdatingProperty">
            <summary>
              The is updating property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PasswordHelper.GetAttach(System.Windows.DependencyObject)">
            <summary>
            The get attach.
            </summary>
            <param name="dp">
            The dp.
            </param>
            <returns>
            The get attach.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PasswordHelper.GetPassword(System.Windows.DependencyObject)">
            <summary>
            The get password.
            </summary>
            <param name="dp">
            The dp.
            </param>
            <returns>
            The get password.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PasswordHelper.SetAttach(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            The set attach.
            </summary>
            <param name="dp">
            The dp.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PasswordHelper.SetPassword(System.Windows.DependencyObject,System.String)">
            <summary>
            The set password.
            </summary>
            <param name="dp">
            The dp.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PasswordHelper.Attach(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The attach.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PasswordHelper.GetIsUpdating(System.Windows.DependencyObject)">
            <summary>
            The get is updating.
            </summary>
            <param name="dp">
            The dp.
            </param>
            <returns>
            The get is updating.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PasswordHelper.OnPasswordPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The on password property changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PasswordHelper.PasswordChanged(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The password changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PasswordHelper.SetIsUpdating(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            The set is updating.
            </summary>
            <param name="dp">
            The dp.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="T:PropertyTools.Wpf.PropertyInfoHelper">
            <summary>
            The property info helper.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyInfoHelper.GetPropertyValue(System.Object,System.String)">
            <summary>
            Gets the value of the specified property of the specified instance.
            </summary>
            <param name="instance">
            The instance.
            </param>
            <param name="propertyName">
            The property name.
            </param>
            <returns>
            The get property.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyInfoHelper.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            The set property.
            </summary>
            <param name="instance">
            The instance.
            </param>
            <param name="propertyName">
            The property name.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="T:PropertyTools.Wpf.TimeSpanFormatter">
            <summary>
            Formats the TimeSpan to a string.
            </summary>
            <remarks>
            See http://www.java2s.com/Open-Source/CSharp/Sound-Mp3/stamp/Microsoft/Office/PowerPoint/STAMP/Core/TimeSpanFormatter.cs.htm
            </remarks>
        </member>
        <member name="F:PropertyTools.Wpf.TimeSpanFormatter.formatParser">
            <summary>
              The format parser.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TimeSpanFormatter.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.TimeSpanFormatter"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TimeSpanFormatter.Format(System.String,System.Object,System.IFormatProvider)">
            <summary>
            Converts the value of a specified timespan to an equivalent string representation using specified format and culture-specific formatting information.
            </summary>
            <param name="format">
            A format string containing formatting specifications.
            </param>
            <param name="arg">
            An object to format.
            </param>
            <param name="formatProvider">
            An object that supplies format information about the current instance.
            </param>
            <returns>
            The string representation of the value of <paramref name="arg"/>, formatted as specified by <paramref name="format"/> and <paramref name="formatProvider"/>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TimeSpanFormatter.GetFormat(System.Type)">
            <summary>
            Returns an object that provides formatting services for the specified type.
            </summary>
            <param name="formatType">
            An object that specifies the type of format object to return.
            </param>
            <returns>
            An instance of the object specified by <paramref name="formatType"/>, if the <see cref="T:System.IFormatProvider"/> implementation can supply that type of object; otherwise, null.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TimeSpanFormatter.EvaluateMatch(System.Text.RegularExpressions.Match,System.TimeSpan)">
            <summary>
            Evaluates a match.
            </summary>
            <param name="match">
            The match.
            </param>
            <param name="timeSpan">
            The time span.
            </param>
            <returns>
            The evaluate match.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TimeSpanFormatter.GetMatchEvaluator(System.TimeSpan)">
            <summary>
            Gets the match evaluator for the specified time span.
            </summary>
            <param name="timeSpan">
            The time span.
            </param>
            <returns>
            The match evaluator.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.TimeSpanParser">
            <summary>
            Parses a string to a TimeSpan.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TimeSpanParser.ParserExpression">
            <summary>
              The parser expression.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TimeSpanParser.Parse(System.String,System.String)">
            <summary>
            Parses the specified value.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="formatString">
            The format string.
            </param>
            <returns>
            A TimeSpan.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.TypeHelper">
            <summary>
            The type helper.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TypeHelper.FindBiggestCommonType(System.Collections.IEnumerable)">
            <summary>
            Finds the biggest common type of items in the list.
            </summary>
            <param name="list">
            The list.
            </param>
            <returns>
            The biggest common type.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TypeHelper.GetEnumType(System.Type)">
            <summary>
            Gets the underlying enum type of the specified type.
            </summary>
            <param name="propertyType">
            The type.
            </param>
            <returns>
            The type of the underlying enum.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TypeHelper.Is(System.Type,System.Type)">
            <summary>
            Determines whether the first type is assignable from the specified second type.
            </summary>
            <param name="firstType">Type of the first type.</param>
            <param name="secondType">The type of the second type.</param>
            <returns>
            True if ok.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.IImageProvider">
            <summary>
            Provides images for PropertyEditor tab icons.
            </summary>
            <remarks>
            Used in PropertyEditor.ImageProvider.
            </remarks>
        </member>
        <member name="M:PropertyTools.Wpf.IImageProvider.GetImage(System.Type,System.String)">
            <summary>
            Return the image
            </summary>
            <param name="type">
            Type of the instance being edited
            </param>
            <param name="key">
            Tab name/key
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ILocalizationService">
            <summary>
            Localize tab/category/property names and tooltips.
            </summary>
            <remarks>
            Used in PropertyEditor.LocalizationService
            </remarks>
        </member>
        <member name="M:PropertyTools.Wpf.ILocalizationService.GetString(System.Type,System.String)">
            <summary>
            The get string.
            </summary>
            <param name="instanceType">
            The instance type.
            </param>
            <param name="key">
            The key.
            </param>
            <returns>
            The get string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ILocalizationService.GetTooltip(System.Type,System.String)">
            <summary>
            The get tooltip.
            </summary>
            <param name="instanceType">
            The instance type.
            </param>
            <param name="key">
            The key.
            </param>
            <returns>
            The get tooltip.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.IPropertyStateProvider">
            <summary>
            Return Enabled, Visible, Error and Warning states for a given component and property.
            </summary>
            <remarks>
            Used in PropertyEditor.
            </remarks>
        </member>
        <member name="M:PropertyTools.Wpf.IPropertyStateProvider.GetError(System.Object,System.ComponentModel.PropertyDescriptor)">
            <summary>
            The get error.
            </summary>
            <param name="component">
            The component.
            </param>
            <param name="descriptor">
            The descriptor.
            </param>
            <returns>
            The get error.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.IPropertyStateProvider.GetWarning(System.Object,System.ComponentModel.PropertyDescriptor)">
            <summary>
            The get warning.
            </summary>
            <param name="component">
            The component.
            </param>
            <param name="descriptor">
            The descriptor.
            </param>
            <returns>
            The get warning.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.IPropertyStateProvider.IsEnabled(System.Object,System.ComponentModel.PropertyDescriptor)">
            <summary>
            The is enabled.
            </summary>
            <param name="component">
            The component.
            </param>
            <param name="descriptor">
            The descriptor.
            </param>
            <returns>
            The is enabled.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.IPropertyStateProvider.IsVisible(System.Object,System.ComponentModel.PropertyDescriptor)">
            <summary>
            The is visible.
            </summary>
            <param name="component">
            The component.
            </param>
            <param name="descriptor">
            The descriptor.
            </param>
            <returns>
            The is visible.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.IPropertyStateUpdater">
            <summary>
            Implement this interface on your model class to be able to updates the property enabled/visible states of the properties.
            </summary>
            <remarks>
            Used in PropertyEditor.
              This update method is called after every property change of the same instance.
            </remarks>
        </member>
        <member name="M:PropertyTools.Wpf.IPropertyStateUpdater.UpdatePropertyStates(PropertyTools.Wpf.PropertyStateBag)">
            <summary>
            The update property states.
            </summary>
            <param name="stateBag">
            The state bag.
            </param>
        </member>
        <member name="T:PropertyTools.Wpf.DelegateCommand">
            <summary>
            Represents a delegate command.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DelegateCommand.canExecute">
            <summary>
              The can execute.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DelegateCommand.execute">
            <summary>
              The execute.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DelegateCommand.#ctor(System.Action)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.DelegateCommand"/> class.
            </summary>
            <param name="execute">
            The execute.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.DelegateCommand"/> class.
            </summary>
            <param name="execute">
            The execute.
            </param>
            <param name="canExecute">
            The can execute.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.DelegateCommand.CanExecute(System.Object)">
            <summary>
            Defines the method that determines whether the command can execute in its current state.
            </summary>
            <param name="parameter">
            Data used by the command.  If the command does not require data to be passed, this object can be set to null.
            </param>
            <returns>
            true if this command can be executed; otherwise, false.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DelegateCommand.Execute(System.Object)">
            <summary>
            Defines the method to be called when the command is invoked.
            </summary>
            <param name="parameter">
            Data used by the command.  If the command does not require data to be passed, this object can be set to null.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.DelegateCommand.RaiseCanExecuteChanged">
            <summary>
            Raises the can execute changed.
            </summary>
        </member>
        <member name="E:PropertyTools.Wpf.DelegateCommand.CanExecuteChanged">
            <summary>
              Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.IResettableProperties">
            <summary>
            The resettable properties interface.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.IResettableProperties.GetResetValue(System.String)">
            <summary>
            The get reset value.
            </summary>
            <param name="propertyName">
            The property name.
            </param>
            <returns>
            The get reset value.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.PropertyStateBag">
            <summary>
            The property state bag.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyStateBag.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.PropertyStateBag"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyStateBag.Enable(System.String,System.Boolean)">
            <summary>
            The enable.
            </summary>
            <param name="propertyName">
            The property name.
            </param>
            <param name="enable">
            The enable.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyStateBag.IsEnabled(System.String)">
            <summary>
            The is enabled.
            </summary>
            <param name="propertyName">
            The property name.
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyStateBag.EnabledProperties">
            <summary>
              Gets EnabledProperties.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyStateBag.VisibleProperties">
            <summary>
              Gets VisibleProperties.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.PropertyDialog">
            <summary>
            Represents a property editing dialog.
            </summary>
            <summary>
            PropertyDialog
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.PropertyDialog"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.GetFieldValues(System.Object)">
            <summary>
            This stores the current "copy" of the object. 
              If it is non-null, then we are in the middle of an 
              editable operation.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <summary>
            This is used to clone the object.  
              Override the method to provide a more efficient clone.  
              The default implementation simply reflects across 
              the object copying every field.
            </summary>
            <returns>
            Clone of current object
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.RestoreFieldValues(System.Collections.Generic.Dictionary{System.String,System.Object},System.Object)">
            <summary>
            This restores the state of the current object from the passed clone object.
            </summary>
            <param name="fieldValues">
            Object to restore state from
            </param>
            <param name="obj">
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.MemberwiseClone(System.Object)">
            <summary>
            Clones the object memberwise.
            </summary>
            <param name="src">
            The SRC.
            </param>
            <returns>
            The memberwise clone.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.ApplyButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The apply button click.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.BeginEdit">
            <summary>
            Begins the edit.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.CancelButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The cancel button click.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.CancelEdit">
            <summary>
            Cancels the edit.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.CloseButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The close button click.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.CommitChanges">
            <summary>
            Commits the changes.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.EndEdit">
            <summary>
            Ends the edit.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.HelpButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The help button click.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.OkButtonClick(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The ok button click.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.PropertyDialogDataContextChanged(System.Object,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The property dialog data context changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyDialog.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyDialog.CanApply">
            <summary>
              Gets or sets a value indicating whether the apply button is visible.
            </summary>
            <value><c>true</c> if this instance can apply; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyDialog.PropertyControl">
            <summary>
              Gets the property control.
            </summary>
            <value>The property control.</value>
        </member>
        <member name="T:PropertyTools.Wpf.ItemsBag">
            <summary>
            Represents a bag of items.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBag.#ctor(System.Collections.IEnumerable)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ItemsBag"/> class.
            </summary>
            <param name="objects">
            The objects.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBag.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBag.RaisePropertyChanged(System.String)">
            <summary>
            Raises the property changed event.
            </summary>
            <param name="property">
            The property.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBag.RelayPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            The relay property changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBag.Subscribe">
            <summary>
            Subscribes to property changed notifications.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBag.Unsubscribe">
            <summary>
            Unsubscribes to property changed notifications.
            </summary>
        </member>
        <member name="E:PropertyTools.Wpf.ItemsBag.PropertyChanged">
            <summary>
              Occurs when a property value changes.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsBag.BiggestType">
            <summary>
              Gets the biggest common type of the objects.
            </summary>
            <value>The type of the biggest.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsBag.Objects">
            <summary>
              Gets the objects in the bag.
            </summary>
            <value>The objects.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsBag.SuspendNotifications">
            <summary>
              Gets or sets a value indicating whether to suspend property changed notifications.
            </summary>
            <value><c>true</c> if notifications are suspended; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:PropertyTools.Wpf.ItemsBagPropertyDescriptor">
            <summary>
            Provides a property descriptor for an object in the <see cref="T:PropertyTools.Wpf.ItemsBag"/>.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsBagPropertyDescriptor.defaultDescriptor">
            <summary>
              The default descriptor.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBagPropertyDescriptor.#ctor(System.ComponentModel.PropertyDescriptor,System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ItemsBagPropertyDescriptor"/> class.
            </summary>
            <param name="defaultDescriptor">
              The default descriptor.
            </param>
            <param name="biggestType"></param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBagPropertyDescriptor.CanResetValue(System.Object)">
            <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
            <param name="component">
            The component to test for reset capability.
            </param>
            <returns>
            true if resetting the component changes its value; otherwise, false.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBagPropertyDescriptor.GetValue(System.Object)">
            <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
            <param name="component">
            The component with the property for which to retrieve the value.
            </param>
            <returns>
            The value of a property for a given component.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBagPropertyDescriptor.ResetValue(System.Object)">
            <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
            <param name="component">
            The component with the property value that is to be reset to the default value.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBagPropertyDescriptor.SetValue(System.Object,System.Object)">
            <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
            <param name="component">
            The component with the property value that is to be set.
            </param>
            <param name="value">
            The new value.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBagPropertyDescriptor.ShouldSerializeValue(System.Object)">
            <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
            <param name="component">
            The component with the property to be examined for persistence.
            </param>
            <returns>
            true if the property should be persisted; otherwise, false.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBagPropertyDescriptor.GetNullableType(System.Type)">
            <summary>
            Gets the type of the nullable.
            </summary>
            <param name="type">
            The type.
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsBagPropertyDescriptor.ComponentType">
            <summary>
              When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
            <value></value>
            <returns>A <see cref = "T:System.Type" /> that represents the type of component this property is bound to. When the <see
               cref = "M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> or <see
               cref = "M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> methods are invoked, the object specified might be an instance of this type.</returns>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsBagPropertyDescriptor.IsReadOnly">
            <summary>
              When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
            <value></value>
            <returns>true if the property is read-only; otherwise, false.</returns>
        </member>
        <member name="P:PropertyTools.Wpf.ItemsBagPropertyDescriptor.PropertyType">
            <summary>
              When overridden in a derived class, gets the type of the property.
            </summary>
            <value></value>
            <returns>A <see cref = "T:System.Type" /> that represents the type of the property.</returns>
        </member>
        <member name="T:PropertyTools.Wpf.ItemsBagTypeDescriptionProvider">
            <summary>
            Provides a type description provider for the <see cref="T:PropertyTools.Wpf.ItemsBag"/>.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsBagTypeDescriptionProvider.DefaultTypeProvider">
            <summary>
              The default type provider.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBagTypeDescriptionProvider.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ItemsBagTypeDescriptionProvider"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBagTypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
            <summary>
            Gets a custom type descriptor for the given type and object.
            </summary>
            <param name="objectType">
            The type of object for which to retrieve the type descriptor.
            </param>
            <param name="instance">
            An instance of the type. Can be null if no instance was passed to the <see cref="T:System.ComponentModel.TypeDescriptor"/>.
            </param>
            <returns>
            An <see cref="T:System.ComponentModel.ICustomTypeDescriptor"/> that can provide metadata for the type.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ItemsBagTypeDescriptor">
            <summary>
            Provides a custom type descriptor for the <see cref="T:PropertyTools.Wpf.ItemsBag"/>.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ItemsBagTypeDescriptor.bag">
            <summary>
              The bag.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBagTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ItemsBagTypeDescriptor"/> class.
            </summary>
            <param name="parent">
            The parent.
            </param>
            <param name="instance">
            The instance.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ItemsBagTypeDescriptor.GetProperties">
            <summary>
            Get the properties of the items bag.
            </summary>
            <returns>
            The property descriptor collection.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.CategoryControlType">
            <summary>
            Specifies the control type for categories.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CategoryControlType.GroupBox">
            <summary>
              Group boxes.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CategoryControlType.Expander">
            <summary>
              Expander controls.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CategoryControlType.Template">
            <summary>
              Content control. Remember to set the CategoryControlTemplate.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.DefaultPropertyControlFactory">
            <summary>
            Provides a default property control factory.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.IPropertyControlFactory">
            <summary>
            Interface for control factories.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.IPropertyControlFactory.CreateControl(PropertyTools.Wpf.PropertyItem,PropertyTools.Wpf.PropertyControlFactoryOptions)">
            <summary>
            Creates the control for a property.
            </summary>
            <param name="pi">
            The property item.
            </param>
            <param name="options">
            The options.
            </param>
            <returns>
            A element.
            </returns>
        </member>
        <member name="F:PropertyTools.Wpf.DefaultPropertyControlFactory.cachedFontFamilies">
            <summary>
              The cached font families.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.DefaultPropertyControlFactory"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.CreateControl(PropertyTools.Wpf.PropertyItem,PropertyTools.Wpf.PropertyControlFactoryOptions)">
            <summary>
            Creates the control for a property.
            </summary>
            <param name="property">
            The property item.
            </param>
            <param name="options">
            The options.
            </param>
            <returns>
            A element.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.CreateBoolControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the bool control.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.CreateBrushControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the brush control.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.CreateColorControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the color control.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.CreateComboBoxControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the combo box control.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.CreateCommentControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the comment control.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.CreateDateTimeControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the date time control.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.CreateDefaultControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the default control.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.CreateDictionaryControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the dictionary control.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.CreateDirectoryPathControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the directory path control.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.CreateEnumControl(PropertyTools.Wpf.PropertyItem,PropertyTools.Wpf.PropertyControlFactoryOptions)">
            <summary>
            Creates the enum control.
            </summary>
            <param name="property">
            The property.
            </param>
            <param name="options">
            The options.
            </param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.CreateFilePathControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the file path control.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.CreateFontFamilyControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the font family control.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.CreateFontPreview(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the font preview.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.CreateGridControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the grid control.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.CreateHtmlControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the HTML control.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.CreateImageControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the image control.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.CreateLinkControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the link control.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.CreatePasswordControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the password control.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.CreateSecurePasswordControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the secure password control.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.CreateSliderControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the slider control.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.CreateSpinControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the spin control.
            </summary>
            <param name="property">
            The property.
            </param>
            <returns>
            The control.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.UpdateConverter(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Updates the converter from the Converters collection.
            </summary>
            <param name="property">
            The property.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyControlFactory.GetFontFamilies">
            <summary>
            Gets the font families.
            </summary>
            <returns>
            List of font families.
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.DefaultPropertyControlFactory.Converters">
            <summary>
              Gets or sets the list of converters.
            </summary>
            <value>The converters.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DefaultPropertyControlFactory.Editors">
            <summary>
              Gets or sets the list of type editors.
            </summary>
            <value>
              The editors.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.DefaultPropertyControlFactory.FileDialogService">
            <summary>
              Gets or sets the file dialog service.
            </summary>
            <value>The file dialog service.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DefaultPropertyControlFactory.FolderBrowserDialogService">
            <summary>
              Gets or sets the folder browser dialog service.
            </summary>
            <value>The folder browser dialog service.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DefaultPropertyControlFactory.UseDatePicker">
            <summary>
              Gets or sets a value indicating whether to use the DatePicker control for DateTime values.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.DefaultPropertyItemFactory">
            <summary>
            Provides a default property item factory.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.IPropertyItemFactory">
            <summary>
            Interface for property item factories.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.IPropertyItemFactory.CreatePropertyItem(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Creates a property item.
            </summary>
            <param name="pd">
            The property descriptor.
            </param>
            <param name="instance">
            The instance.
            </param>
            <returns>
            A property item.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.IPropertyItemFactory.Reset">
            <summary>
            Resets this factory.
            </summary>
            <remarks>
            The factory is reset before the CreatePropertyItem methods are called.
              This makes it possible to reset default values.
            </remarks>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyItemFactory.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.DefaultPropertyItemFactory"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyItemFactory.CreatePropertyItem(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Creates a property item.
            </summary>
            <param name="pd">
            The property descriptor.
            </param>
            <param name="instance">
            The instance.
            </param>
            <returns>
            A property item.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyItemFactory.Reset">
            <summary>
            Resets this factory.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyItemFactory.NicifyString(System.String)">
            <summary>
            Variables the display name of the name to.
            </summary>
            <param name="variableName">
            Name of the variable.
            </param>
            <returns>
            The nicify string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyItemFactory.CreateCore(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Creates the property item instance.
            </summary>
            <param name="pd">
            The pd.
            </param>
            <param name="instance">
            The instance.
            </param>
            <returns>
            The core.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyItemFactory.GetDescription(System.ComponentModel.PropertyDescriptor,System.Type)">
            <summary>
            Gets the tool tip for the specified property.
            </summary>
            <param name="pd">
            The property descriptor.
            </param>
            <param name="declaringType">
            The declaring type.
            </param>
            <returns>
            A tool tip.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyItemFactory.GetDisplayName(System.ComponentModel.PropertyDescriptor,System.Type)">
            <summary>
            Gets the display name for the specified property.
            </summary>
            <param name="pd">
            The property descriptor.
            </param>
            <param name="declaringType">
            The declaring type.
            </param>
            <returns>
            A display name string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyItemFactory.GetLocalizedDescription(System.String,System.Type)">
            <summary>
            Gets the localized description.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="declaringType">
            Type of the declaring.
            </param>
            <returns>
            The localized description.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyItemFactory.GetLocalizedString(System.String,System.Type)">
            <summary>
            Gets the localized string.
            </summary>
            <param name="key">
            The key.
            </param>
            <param name="declaringType">
            The declaring type.
            </param>
            <returns>
            The localized string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyItemFactory.SetProperties(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Sets the properties.
            </summary>
            <param name="pi">
            The property item.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyItemFactory.CreateModel(System.Object,System.Boolean,PropertyTools.Wpf.PropertyControlOptions)">
            <summary>
            Creates the property model.
            </summary>
            <param name="instance">
            The instance.
            </param>
            <param name="isEnumerable">
            if set to <c>true</c> [is enumerable].
            </param>
            <returns>
            A list of <see cref="T:PropertyTools.Wpf.Tab"/>.
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.DefaultPropertyItemFactory.DefaultCategoryName">
            <summary>
              Gets or sets the default name of the category.
            </summary>
            <value>The default name of the category.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DefaultPropertyItemFactory.DefaultTabName">
            <summary>
              Gets or sets the default name of the tab.
            </summary>
            <value>The default name of the tab.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DefaultPropertyItemFactory.EnabledPattern">
            <summary>
              Gets or sets the enabled pattern.
            </summary>
            <value>The enabled pattern.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DefaultPropertyItemFactory.InheritCategories">
            <summary>
              Gets or sets a value indicating whether each property should inherit the category attribute from the property declared before.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DefaultPropertyItemFactory.NicifyDisplayNames">
            <summary>
              Gets or sets a value indicating whether to 'nicify' display names.
            </summary>
            <remarks>
              The 'nicifiying' adds spaces at the camel bumps.
            </remarks>
            <value><c>true</c> if display names should be nicified; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DefaultPropertyItemFactory.OptionalPattern">
            <summary>
              Gets or sets the optional pattern.
            </summary>
            <value>The optional pattern.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DefaultPropertyItemFactory.VisiblePattern">
            <summary>
              Gets or sets the visible pattern.
            </summary>
            <value>The visible pattern.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DefaultPropertyItemFactory.CurrentCategory">
            <summary>
              Gets or sets the current category.
            </summary>
            <value>The current category.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DefaultPropertyItemFactory.CurrentCategoryDeclaringType">
            <summary>
              Gets or sets the declaring type of the current category.
            </summary>
            <value>
              The type of the current category.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.DefaultPropertyItemFactory.CurrentDeclaringType">
            <summary>
              Gets or sets the type of the current component.
            </summary>
            <remarks>
              This is used to avoid that Category attributes are inherited from superclass to subclass.
            </remarks>
            <value>
              The type of the current component.
            </value>
        </member>
        <member name="T:PropertyTools.Wpf.Group">
            <summary>
            Represents a group in a <see cref="T:PropertyTools.Wpf.PropertyControl"/>.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.Group.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.Group"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.Group.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The to string.
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.Group.Description">
            <summary>
              Gets or sets the description.
            </summary>
            <value>
              The description.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.Group.Header">
            <summary>
              Gets or sets the header.
            </summary>
            <value>
              The header.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.Group.Icon">
            <summary>
              Gets or sets the icon.
            </summary>
            <value>
              The icon.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.Group.Properties">
            <summary>
              Gets the properties.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.LabelWidthSharing">
            <summary>
            The label width sharing.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.LabelWidthSharing.SharedInTab">
            <summary>
            The shared in tab.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.LabelWidthSharing.SharedInGroup">
            <summary>
            The shared in group.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.LabelWidthSharing.NotShared">
            <summary>
            The not shared.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.PropertyControl">
            <summary>
            The property control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.PartPanel">
            <summary>
              The panel part constant.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.PartScroller">
            <summary>
              The scroller part constant.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.PartTabs">
            <summary>
              The tabs part constant.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.CategoryControlTemplateProperty">
            <summary>
              The category control template property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.CategoryControlTypeProperty">
            <summary>
              The category control type property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.CategoryHeaderTemplateProperty">
            <summary>
              The category header template property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.DescriptionIconAlignmentProperty">
            <summary>
              The description icon alignment property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.DescriptionIconProperty">
            <summary>
              The description icon property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.EnableLabelWidthResizingProperty">
            <summary>
            The enable label column resizing property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.EnumAsRadioButtonsLimitProperty">
            <summary>
              The enum as radio buttons limit property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.LabelWidthSharingProperty">
            <summary>
            The label width sharing property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.MaximumLabelWidthProperty">
            <summary>
            The maximum label width property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.MinimumLabelWidthProperty">
            <summary>
              The minimum label width property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.MoveFocusOnEnterProperty">
            <summary>
              The move focus on enter property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.PropertyControlFactoryProperty">
            <summary>
              The property control factory property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.PropertyItemFactoryProperty">
            <summary>
              The property item factory property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.RequiredAttributeProperty">
            <summary>
              The required attribute property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.SelectedObjectProperty">
            <summary>
              The selected object property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.SelectedObjectsProperty">
            <summary>
              The selected objects property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.SelectedTabIndexProperty">
            <summary>
              The selected tab index property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.ShowCheckBoxHeadersProperty">
            <summary>
              The show check box headers property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.ShowDeclaredOnlyProperty">
            <summary>
              The show declared only property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.ShowDescriptionIconsProperty">
            <summary>
              The show description icons property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.ShowReadOnlyPropertiesProperty">
            <summary>
              The show read only properties property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.TabHeaderTemplateProperty">
            <summary>
              The tab header template property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.TabPageHeaderTemplateProperty">
            <summary>
              The tab page header template property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.TabStripPlacementProperty">
            <summary>
              The tab strip placement property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.ToolTipTemplateProperty">
            <summary>
              The tool tip template property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.UseTabsProperty">
            <summary>
              The use tabs property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.ValidationErrorStyleProperty">
            <summary>
              The validation error style property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.ValidationErrorTemplateProperty">
            <summary>
              The validation error template property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.ValidationTemplateProperty">
            <summary>
              The validation template property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.BoolToVisibilityConverter">
            <summary>
              The bool to visibility converter.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.NullToBoolConverter">
            <summary>
              The null to bool converter.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.ZeroToVisibilityConverter">
            <summary>
              The zero to visibility converter.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.currentSelectedObjectType">
            <summary>
              The current selected object type.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.panelControl">
            <summary>
              The panel control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.scrollViewer">
            <summary>
              The scroll viewer.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyControl.tabControl">
            <summary>
              The tab control.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyControl.#cctor">
            <summary>
              Initializes static members of the <see cref="T:PropertyTools.Wpf.PropertyControl"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyControl.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.PropertyControl"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyControl.CreateControls(System.Object,System.Collections.Generic.IEnumerable{PropertyTools.Wpf.Tab})">
            <summary>
            Creates the controls.
            </summary>
            <param name="instance">
            The instance. 
            </param>
            <param name="tabs">
            The tabs. 
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyControl.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/> .
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyControl.CreateToolTip(System.String)">
            <summary>
            Creates a tool tip.
            </summary>
            <param name="content">
            The content. 
            </param>
            <returns>
            The tool tip. 
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyControl.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Invoked when an unhandled KeyDown attached event reaches an element in its route that is derived from this class. Implement this method to add class handling for this event.
            </summary>
            <param name="e">
            The <see cref="T:System.Windows.Input.KeyEventArgs"/> that contains the event data. 
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyControl.OnSelectedObjectChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Called when the selected object is changed.
            </summary>
            <param name="e">
            The e. 
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyControl.AppearanceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The appearance changed.
            </summary>
            <param name="d">
            The d. 
            </param>
            <param name="e">
            The e. 
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyControl.AddPropertyPanel(System.Windows.Controls.Panel,PropertyTools.Wpf.PropertyItem,System.Object)">
            <summary>
            Creates and adds the property panel.
            </summary>
            <param name="panel">
            The panel where the property panel should be added. 
            </param>
            <param name="pi">
            The property. 
            </param>
            <param name="instance">
            The instance. 
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyControl.CreateLabel(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the label control.
            </summary>
            <param name="pi">
            The property item. 
            </param>
            <returns>
            An element. 
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyControl.CreatePropertyControl(PropertyTools.Wpf.PropertyItem)">
            <summary>
            Creates the property control.
            </summary>
            <param name="pi">
            The property item. 
            </param>
            <returns>
            An element. 
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyControl.SelectedObjectsChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes in SelectedObjects.
            </summary>
            <param name="e">
            The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data. 
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyControl.UpdateControls">
            <summary>
            Updates the controls.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.CategoryControlTemplate">
            <summary>
              Gets or sets the category control template.
            </summary>
            <value> The category control template. </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.CategoryControlType">
            <summary>
              Gets or sets the type of the category control.
            </summary>
            <value> The type of the category control. </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.CategoryHeaderTemplate">
            <summary>
              Gets or sets the category header template.
            </summary>
            <value> The category header template. </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.CurrentObject">
            <summary>
              Gets or sets CurrentObject.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.DescriptionIcon">
            <summary>
              Gets or sets the description icon.
            </summary>
            <value> The description icon. </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.DescriptionIconAlignment">
            <summary>
              Gets or sets the alignment for description icons.
            </summary>
            <value> The description icon alignment. </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.EnableLabelWidthResizing">
            <summary>
              Gets or sets a value indicating whether label column resizing is enabled.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.EnumAsRadioButtonsLimit">
            <summary>
              Gets or sets the limiting number of enum values for radio buttons lists.
            </summary>
            <value> The limit. </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.Factories">
            <summary>
              Gets or sets the property control factories.
            </summary>
            <value> The factories. </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.LabelWidthSharing">
            <summary>
              Gets or sets the type of label width sharing.
            </summary>
            <value> The label width sharing. </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.MaximumLabelWidth">
            <summary>
              Gets or sets the maximum width of the label.
            </summary>
            <value> The maximum width of the label. </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.MinimumLabelWidth">
            <summary>
              Gets or sets the minimum width of the property labels.
            </summary>
            <value> The minimum width. </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.MoveFocusOnEnter">
            <summary>
              Gets or sets a value indicating whether to move focus on unhandled Enter key down events.
            </summary>
            <value> <c>true</c> if move focus on enter; otherwise, <c>false</c> . </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.PropertyControlFactory">
            <summary>
              Gets or sets PropertyControlFactory.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.PropertyItemFactory">
            <summary>
              Gets or sets the property item factory.
            </summary>
            <value> The property item factory. </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.RequiredAttribute">
            <summary>
              Gets or sets the required attribute type.
            </summary>
            <value> The required attribute type. </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.SelectedObject">
            <summary>
              Gets or sets the selected object.
            </summary>
            <value> The selected object. </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.SelectedObjects">
            <summary>
              Gets or sets the selected objects.
            </summary>
            <value> The selected objects. </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.SelectedTabIndex">
            <summary>
              Gets or sets the index of the selected tab.
            </summary>
            <value> The index of the selected tab. </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.ShowCheckBoxHeaders">
            <summary>
              Gets or sets a value indicating whether to show check box headers.
            </summary>
            <value> <c>true</c> if check box headers should be shown; otherwise, <c>false</c> . </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.ShowDeclaredOnly">
            <summary>
              Gets or sets a value indicating whether to show declared properties only.
            </summary>
            <value> <c>true</c> if only declared properti should be shown; otherwise, <c>false</c> . </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.ShowDescriptionIcons">
            <summary>
              Gets or sets a value indicating whether to show description icons.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.ShowReadOnlyProperties">
            <summary>
              Gets or sets a value indicating whether to show read only properties].
            </summary>
            <value> <c>true</c> if read only properties should be shown; otherwise, <c>false</c> . </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.TabHeaderTemplate">
            <summary>
              Gets or sets the tab header template.
            </summary>
            <value> The tab header template. </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.TabPageHeaderTemplate">
            <summary>
              Gets or sets the tab page header template.
            </summary>
            <value> The tab page header template. </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.TabStripPlacement">
            <summary>
              Gets or sets the tab strip placement.
            </summary>
            <value> The tab strip placement. </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.ToolTipTemplate">
            <summary>
              Gets or sets the tool tip template.
            </summary>
            <value> The tool tip template. </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.UseTabs">
            <summary>
              Gets or sets a value indicating whether to use tabs.
            </summary>
            <value> <c>true</c> if tabs should be used; otherwise, <c>false</c> . </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.ValidationErrorStyle">
            <summary>
              Gets or sets the validation error style.
            </summary>
            <value> The validation error style. </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.ValidationErrorTemplate">
            <summary>
              Gets or sets the validation error template.
            </summary>
            <value> The validation error template. </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControl.ValidationTemplate">
            <summary>
              Gets or sets the validation template.
            </summary>
            <value> The validation template. </value>
        </member>
        <member name="T:PropertyTools.Wpf.PropertyControlFactoryOptions">
            <summary>
            Represents options for the property control factory.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyControlFactoryOptions.EnumAsRadioButtonsLimit">
            <summary>
              Gets or sets the limiting number of values for enum as radio buttons.
            </summary>
            <value>The limit.</value>
        </member>
        <member name="T:PropertyTools.Wpf.PropertyItem">
            <summary>
            Represents a property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyItem.#ctor(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.PropertyItem"/> class.
            </summary>
            <param name="propertyDescriptor">
            The property descriptor.
            </param>
            <param name="instance">
            The instance.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyItem.CreateBinding(System.Windows.Data.UpdateSourceTrigger)">
            <summary>
            Creates a binding.
            </summary>
            <param name="trigger">
            The trigger.
            </param>
            <returns>
            The binding.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyItem.CreateOneWayBinding">
            <summary>
            Creates a one way binding.
            </summary>
            <returns>
            The binding.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyItem.GetAttribute``1">
            <summary>
            Gets the first attribute of the specified type.
            </summary>
            <typeparam name="T">
            Type of attribute.
            </typeparam>
            <returns>
            The attribute, or null.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyItem.GetAttributes``1">
            <summary>
            Gets the attributes of the specified type.
            </summary>
            <typeparam name="T">
            Type of attribute.
            </typeparam>
            <returns>
            Enumerable of T.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyItem.GetDescriptor(System.String)">
            <summary>
            Gets the property descriptor for the specified property.
            </summary>
            <param name="name">
            The property name.
            </param>
            <returns>
            A property descriptor.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyItem.Is(System.Type)">
            <summary>
            Determines whether the specified type is assignable from this property type.
            </summary>
            <param name="type">
            The type.
            </param>
            <returns>
            <c>true</c> if ok; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyItem.GetConverterTargetType">
            <summary>
            Gets the type of the converter target.
            </summary>
            <returns>
            The target type.
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.AcceptsReturn">
            <summary>
              Gets or sets a value indicating whether to accept return.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.ActualPropertyType">
            <summary>
              Gets the actual type of the property.
            </summary>
            <remarks>
              If a converter is defined, the target type will be set.
            </remarks>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.AutoUpdateText">
            <summary>
              Gets or sets a value indicating whether to auto update text.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.Category">
            <summary>
              Gets or sets the category.
            </summary>
            <value>
              The category.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.Columns">
            <summary>
              Gets the columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.Converter">
            <summary>
              Gets or sets the converter.
            </summary>
            <value>The converter.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.ConverterCulture">
            <summary>
              Gets or sets the converter culture.
            </summary>
            <value>
              The converter culture.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.ConverterParameter">
            <summary>
              Gets or sets the converter parameter.
            </summary>
            <value>
              The converter parameter.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.DataTypes">
            <summary>
              Gets the data types.
            </summary>
            <value>The data types.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.Description">
            <summary>
              Gets or sets the tool tip.
            </summary>
            <value>The tool tip.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.Descriptor">
            <summary>
              Gets or sets the property descriptor.
            </summary>
            <value>The descriptor.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.DisplayName">
            <summary>
              Gets or sets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.FilePathDefaultExtension">
            <summary>
              Gets or sets the file path default extension.
            </summary>
            <value>The file path default extension.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.FilePathFilter">
            <summary>
              Gets or sets the file path filter.
            </summary>
            <value>The file path filter.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.FilterDescriptor">
            <summary>
              Gets or sets the filter descriptor.
            </summary>
            <value>The filter descriptor.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.FontFamilyPropertyDescriptor">
            <summary>
              Gets or sets the font family property descriptor.
            </summary>
            <value>The font family property descriptor.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.FontSize">
            <summary>
              Gets or sets the size of the font.
            </summary>
            <value>The size of the font.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.FontWeight">
            <summary>
              Gets or sets the open type weight.
            </summary>
            <value>The font weight.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.FormatString">
            <summary>
              Gets or sets the format string.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.HeaderPlacement">
            <summary>
              Gets or sets the header placement.
            </summary>
            <value>The header placement.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.Height">
            <summary>
              Gets or sets the height.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.Instance">
            <summary>
              Gets or sets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsComment">
            <summary>
              Gets or sets a value indicating whether the property is a comment.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsDirectoryPath">
            <summary>
              Gets or sets a value indicating whether the property is a directory path.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsEditable">
            <summary>
              Gets or sets a value indicating whether the property is editable.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsEnabledDescriptor">
            <summary>
              Gets or sets the is enabled descriptor.
            </summary>
            <value>The is enabled descriptor.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsFileOpenDialog">
            <summary>
              Gets or sets a value indicating whether the property is a file open dialog.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsFilePath">
            <summary>
              Gets or sets a value indicating whether the property is a file path.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsOptional">
            <summary>
              Gets or sets a value indicating whether this property is optional.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsPassword">
            <summary>
              Gets or sets a value indicating whether the property is a password.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsSlidable">
            <summary>
              Gets or sets a value indicating whether this instance is "slidable".
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsSpinnable">
            <summary>
              Gets or sets a value indicating whether this instance is "spinnable".
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsVisibleDescriptor">
            <summary>
              Gets or sets the is visible descriptor.
            </summary>
            <value>The is visible descriptor.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.ItemsSourceDescriptor">
            <summary>
              Gets or sets the values descriptor.
            </summary>
            <value>The values descriptor.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.ListCanAdd">
            <summary>
              Gets or sets a value indicating whether items can be added to the list.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.ListCanRemove">
            <summary>
              Gets or sets a value indicating whether items can be removed from the list.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.ListMaximumNumberOfItems">
            <summary>
              Gets or sets the list maximum number of items.
            </summary>
            <value>
              The list maximum number of items.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.MaxLength">
            <summary>
              Gets or sets the max length.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.MaximumHeight">
            <summary>
              Gets or sets the maximum height.
            </summary>
            <value>The maximum height.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.MinimumHeight">
            <summary>
              Gets or sets the minimum height.
            </summary>
            <value>The minimum height.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.MoveFocusOnEnter">
            <summary>
              Gets or sets a value indicating whether to move focus on enter.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.OptionalDescriptor">
            <summary>
              Gets or sets the optional descriptor.
            </summary>
            <value>The optional descriptor.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.OptionalValue">
            <summary>
              Gets or sets the optional value.
            </summary>
            <value>The optional value.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.IsFontFamilySelector">
            <summary>
            Gets or sets a value indicating whether this property is a font family selector.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.PreviewFonts">
            <summary>
              Gets or sets a value indicating whether to preview fonts.
            </summary>
            <value><c>true</c> if fonts should be previewed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.Properties">
            <summary>
              Gets or sets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.PropertyIcon">
            <summary>
              Gets or sets the property icon.
            </summary>
            <value>The property icon.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.RelativePathDescriptor">
            <summary>
              Gets or sets the relative path descriptor.
            </summary>
            <value>The relative path descriptor.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.ResetCommand">
            <summary>
              Gets or sets the reset command.
            </summary>
            <value>The reset command.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.ResetHeader">
            <summary>
              Gets or sets the reset header.
            </summary>
            <value>The reset header.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.SliderLargeChange">
            <summary>
              Gets or sets the slider large change.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.SliderMaximum">
            <summary>
              Gets or sets the slider maximum.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.SliderMinimum">
            <summary>
              Gets or sets the slider minimum.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.SliderSmallChange">
            <summary>
              Gets or sets the slider small change.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.SliderSnapToTicks">
            <summary>
              Gets or sets a value indicating whether the slider snaps to the ticks.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.SliderTickFrequency">
            <summary>
              Gets or sets the slider tick frequency.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.SortIndex">
            <summary>
              Gets or sets the index of the sort.
            </summary>
            <value>The index of the sort.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.SpinLargeChange">
            <summary>
              Gets or sets the spin control large change.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.SpinMaximum">
            <summary>
              Gets or sets the spin control maximum.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.SpinMinimum">
            <summary>
              Gets or sets the spin control minimum.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.SpinSmallChange">
            <summary>
              Gets or sets the spin control small change.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.Tab">
            <summary>
              Gets or sets the tab.
            </summary>
            <value>
              The tab.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.TextWrapping">
            <summary>
              Gets or sets the text wrapping.
            </summary>
            <value>The text wrapping.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.UseRadioButtons">
            <summary>
              Gets or sets a value indicating whether the property should use radio buttons.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyItem.Width">
            <summary>
              Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="T:PropertyTools.Wpf.ValidationErrorsToStringConverter">
            <summary>
            Converts <see cref="T:System.Windows.Controls.ValidationError"/> lists to <see cref="T:System.String"/> instances.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ValidationErrorsToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value produced by the binding source.
            </param>
            <param name="targetType">
            The type of the binding target property.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ValidationErrorsToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value that is produced by the binding target.
            </param>
            <param name="targetType">
            The type to convert to.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.WebBrowserBehavior">
            <summary>
            Contains behaviors for the <see cref="T:System.Windows.Controls.WebBrowser"/> control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.WebBrowserBehavior.NavigateToStringProperty">
            <summary>
              The navigate to string property.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.WebBrowserBehavior.GetNavigateToString(System.Windows.DependencyObject)">
            <summary>
            The get navigate to string.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The get navigate to string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.WebBrowserBehavior.SetNavigateToString(System.Windows.DependencyObject,System.String)">
            <summary>
            The set navigate to string.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.WebBrowserBehavior.NavigateToStringChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The navigate to string changed.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="T:PropertyTools.Wpf.Tab">
            <summary>
            Represents a tab in a <see cref="T:PropertyTools.Wpf.PropertyControl"/>.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.Tab.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.Tab"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.Tab.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.Tab.Description">
            <summary>
              Gets or sets the description.
            </summary>
            <value>
              The description.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.Tab.Groups">
            <summary>
              Gets the groups.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.Tab.Header">
            <summary>
              Gets or sets the header.
            </summary>
            <value>
              The header.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.Tab.Icon">
            <summary>
              Gets or sets the icon.
            </summary>
            <value>
              The icon.
            </value>
        </member>
        <member name="T:PropertyTools.Wpf.CategoryTemplateSelector">
            <summary>
            The CategoryTemplateSelector is used to select a DataTemplate for the categories
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.CategoryTemplateSelector.#ctor(PropertyTools.Wpf.PropertyEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.CategoryTemplateSelector"/> class.
            </summary>
            <param name="owner">
            The owner.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.CategoryTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            The select template.
            </summary>
            <param name="item">
            The item.
            </param>
            <param name="container">
            The container.
            </param>
            <returns>
            </returns>
            <exception cref="T:System.ArgumentException">
            </exception>
        </member>
        <member name="M:PropertyTools.Wpf.CategoryTemplateSelector.TryToFindDataTemplate(System.Windows.FrameworkElement,System.Object)">
            <summary>
            The try to find data template.
            </summary>
            <param name="element">
            The element.
            </param>
            <param name="dataTemplateKey">
            The data template key.
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.CategoryTemplateSelector.Owner">
            <summary>
              Gets Owner.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.CategoryTemplateSelector.TemplateOwner">
            <summary>
              Gets or sets TemplateOwner.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.PropertyConverter">
            <summary>
            Represents a property converter.
            </summary>
            <remarks>
            Add property converters to the PropertyControl.Converters collection.
            </remarks>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyConverter.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.PropertyConverter"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyConverter.#ctor(System.Type,System.Windows.Data.IValueConverter)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.PropertyConverter"/> class.
            </summary>
            <param name="propertyType">
            Type of the property.
            </param>
            <param name="converter">
            The converter.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyConverter.GetTargetType">
            <summary>
            Gets the target type of the converter.
            </summary>
            <returns>
            The target type.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyConverter.IsAssignable(System.Type)">
            <summary>
            Determines whether the specified type is assignable to the EditedType.
            </summary>
            <param name="type">
            The type.
            </param>
            <returns>
            <c>true</c> if the specified type is assignable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyConverter.Converter">
            <summary>
              Gets or sets template for this type.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyConverter.PropertyType">
            <summary>
              Gets or sets the type to edit.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.ShowCategoriesAs">
            <summary>
            The show categories as.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ShowCategoriesAs.GroupBox">
            <summary>
              The group box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ShowCategoriesAs.Expander">
            <summary>
              The expander.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ShowCategoriesAs.Header">
            <summary>
              The header.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.PropertyEditor">
            <summary>
            PropertyEditor control.
            </summary>
            <remarks>
            This control is creting a PropertyViewModel and uses data templates to create the controls.
              Set the SelectedObject to define the contents of the control.
            </remarks>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.CATEGORY_APPEARANCE">
            <summary>
              The appearance category.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.PART_GRID">
            <summary>
              The grid part name.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.PART_PAGE">
            <summary>
              The page part name.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.PART_TABS">
            <summary>
              The tabs part name.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.CategoryTemplateSelectorProperty">
            <summary>
              The category template selector property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.DeclaredOnlyProperty">
            <summary>
              The declared only property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.DefaultCategoryNameProperty">
            <summary>
              The default category name property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.DefaultTabNameProperty">
            <summary>
              The default tab name property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.EnumAsRadioButtonsLimitProperty">
            <summary>
              The enum as radio buttons limit property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.ErrorBorderThicknessProperty">
            <summary>
              The error border thickness property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.ErrorTemplateProperty">
            <summary>
              The error template property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.ImageProviderProperty">
            <summary>
              The image provider property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.LabelAlignmentProperty">
            <summary>
              The label alignment property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.LabelWidthProperty">
            <summary>
              The label width property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.LocalizationServiceProperty">
            <summary>
              The localization service property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.PropertyStateProviderProperty">
            <summary>
              The property state provider property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.PropertyTemplateSelectorProperty">
            <summary>
              The property template selector property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.RequiredAttributeProperty">
            <summary>
              The required attribute property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.SelectedObjectProperty">
            <summary>
              The selected object property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.SelectedObjectsProperty">
            <summary>
              The selected objects property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.ShowBoolHeaderProperty">
            <summary>
              The show bool header property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.ShowCategoriesAsProperty">
            <summary>
              The show categories as property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.ShowReadOnlyPropertiesProperty">
            <summary>
              The show read only properties property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.ShowTabsProperty">
            <summary>
              The show tabs property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.UseDefaultCategoryNameForUncategorizedPropertiesProperty">
            <summary>
              The use default category name for uncategorized properties property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.WarningTemplateProperty">
            <summary>
              The warning template property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.PropertyValueChangedEvent">
            <summary>
              The property value changed event.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.propertyMap">
            <summary>
              The PropertyMap dictionary contains a map of all Properties of the current object being edited.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.contentControl">
            <summary>
              The content control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.grid">
            <summary>
              The grid.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.model">
            <summary>
              The model.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.propertyViewModelFactory">
            <summary>
              The property view model factory.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyEditor.tabControl">
            <summary>
              The tab control.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.#cctor">
            <summary>
              Initializes static members of the <see cref="T:PropertyTools.Wpf.PropertyEditor"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.PropertyEditor"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.CreatePropertyModel(System.Object,System.Boolean)">
            <summary>
            This method takes an object Instance and creates the property model.
              The properties are organized in a hierarchy
              PropertyTab
              PropertyCategory
              Property|OptionalProperty|WideProperty|CheckBoxProperty
            </summary>
            <param name="instance">
            </param>
            <param name="isEnumerable">
            </param>
            <returns>
            Collection of tab ViewModels
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.OnApplyTemplate">
            <summary>
            The on apply template.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.UpdateContent">
            <summary>
            Updates the content of the control
              (after initialization and SelectedObject changes)
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            The on key down.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.AppearanceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The appearance changed.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.ParseTabAndCategory(System.ComponentModel.PropertyDescriptor,System.String@,System.String@)">
            <summary>
            If a CategoryAttributes is given as
              [Category("TabA|GroupB")]
              this will be parsed into tabName="TabA" and categoryName="GroupB"
              If the CategoryAttribute is
              [Category("GroupC")]
              the method will not change tabName, but set categoryName="GroupC"
            </summary>
            <param name="descriptor">
            The descriptor.
            </param>
            <param name="tabName">
            Name of the tab.
            </param>
            <param name="categoryName">
            Name of the category.
            </param>
            <returns>
            true if the descriptor contained a CategoryAttribute
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.SelectedObjectChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The selected object changed.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.SelectedObjectsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The selected objects changed.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.CheckOptionalProperties">
            <summary>
            The check optional properties.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.ClearModel">
            <summary>
            The clear model.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.CreateTab(System.String)">
            <summary>
            The create tab.
            </summary>
            <param name="tabName">
            The tab name.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.GetLocalizedString(System.Type,System.String)">
            <summary>
            The get localized string.
            </summary>
            <param name="instanceType">
            The instance type.
            </param>
            <param name="key">
            The key.
            </param>
            <returns>
            The get localized string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.GetLocalizedTooltip(System.Type,System.String)">
            <summary>
            The get localized tooltip.
            </summary>
            <param name="instanceType">
            The instance type.
            </param>
            <param name="key">
            The key.
            </param>
            <returns>
            The get localized tooltip.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.GetOrCreateCategory(System.Type,System.String,System.Int32,PropertyTools.Wpf.TabViewModel,PropertyTools.Wpf.CategoryViewModel@)">
            <summary>
            The get or create category.
            </summary>
            <param name="instanceType">
            The instance type.
            </param>
            <param name="categoryName">
            The category name.
            </param>
            <param name="SortIndex">
            The sort order.
            </param>
            <param name="currentTabViewModel">
            The current tab view model.
            </param>
            <param name="currentCategoryViewModel">
            The current category view model.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.GetOrCreateTab(System.Type,System.Collections.Generic.ICollection{PropertyTools.Wpf.TabViewModel},System.String,System.Int32,PropertyTools.Wpf.TabViewModel@,PropertyTools.Wpf.CategoryViewModel@)">
            <summary>
            The get or create tab.
            </summary>
            <param name="instanceType">
            The instance type.
            </param>
            <param name="tabs">
            The tabs.
            </param>
            <param name="tabName">
            The tab name.
            </param>
            <param name="SortIndex">
            The sort order.
            </param>
            <param name="currentTabViewModel">
            The current tab view model.
            </param>
            <param name="currentCategoryViewModel">
            The current category view model.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.LocalizeCategoryHeader(System.Type,PropertyTools.Wpf.CategoryViewModel)">
            <summary>
            Updates the category (expander/groupbox) header and tooltip
            </summary>
            <param name="instanceType">
            </param>
            <param name="categoryViewModel">
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.LocalizePropertyHeader(System.Type,PropertyTools.Wpf.PropertyViewModel)">
            <summary>
            Updates the property header and tooltip
            </summary>
            <param name="instanceType">
            Type of the object being edited
            </param>
            <param name="propertyViewModel">
            The property viewmodel
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.LocalizeTabHeader(System.Type,PropertyTools.Wpf.TabViewModel)">
            <summary>
            Updates the tab header and tooltip
            </summary>
            <param name="instanceType">
            </param>
            <param name="tabViewModel">
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.OnPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            The OnPropertyChanged handler.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The event arguments.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.PropertyEditor_Loaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The property editor_ loaded.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.PropertyEditor_Unloaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The property editor_ unloaded.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.RaisePropertyChangedEvent(System.String,System.Object,System.Object)">
            <summary>
            Invoke this method to raise a PropertyChanged event.
              This event only makes sense when editing single objects (not IEnumerables).
            </summary>
            <param name="propertyName">
            The property Name.
            </param>
            <param name="oldValue">
            The old Value.
            </param>
            <param name="newValue">
            The new Value.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.SortPropertyModel(System.Collections.Generic.List{PropertyTools.Wpf.TabViewModel})">
            <summary>
            The sort property model.
            </summary>
            <param name="result">
            The result.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.UpdateErrorInfo">
            <summary>
            The update error info.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.UpdateOptionalProperties(PropertyTools.Wpf.PropertyViewModel)">
            <summary>
            Update IsEnabled on properties marked [Optional(..)]
            </summary>
            <param name="propertyViewModel">
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyEditor.UpdatePropertyStates(System.Object)">
            <summary>
            The UpdatePropertyStates method updates the properties IsEnabled when the instance being edited implements IPropertyStateUpdater.
            </summary>
            <param name="instance">
            The instance.
            </param>
        </member>
        <member name="E:PropertyTools.Wpf.PropertyEditor.PropertyChanged">
            <summary>
              The property changed.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.rortemplate">
            <summary>
              Gets rortemplate.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.CategoryTemplateSelector">
            <summary>
              The CategoryTemplateSelector is used to select the DataTemplate for the CategoryViewModels
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.DeclaredOnly">
            <summary>
              Show only declared properties (not inherited properties).
              Specifies that only members declared at the level of the supplied type's hierarchy 
              should be considered. Inherited members are not considered.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.DefaultCategoryName">
            <summary>
              Gets or sets DefaultCategoryName.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.DefaultTabName">
            <summary>
              Gets or sets DefaultTabName.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.Editors">
            <summary>
              Collection of custom editors
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.EnumAsRadioButtonsLimit">
            <summary>
              Gets or sets the maximum number of enum values that can be shown using radio buttons.
              If the value is 0, Enums will always be shown as ComboBoxes.
              If the value is infinity, Enums will always be shown as Radiobuttons.
            </summary>
            <value>The limit.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.ErrorBorderThickness">
            <summary>
              Gets or sets ErrorBorderThickness.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.ErrorTemplate">
            <summary>
              Gets or sets ErrorTemplate.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.FileDialogService">
            <summary>
              Gets or sets FileDialogService.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.FolderBrowserDialogService">
            <summary>
              Gets or sets FolderBrowserDialogService.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.ImageProvider">
            <summary>
              The ImageProvider can be used to provide images to the Tab icons.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.LabelAlignment">
            <summary>
              Gets or sets the alignment of property labels.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.LabelWidth">
            <summary>
              The width of the property labels
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.LocalizationService">
            <summary>
              Implement the LocalizationService to translate the tab, category and property strings and tooltips
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.PropertyStateProvider">
            <summary>
              Gets or sets PropertyStateProvider.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.PropertyTemplateSelector">
            <summary>
              The PropertyTemplateSelector is used to select the DataTemplate for each PropertyViewModel
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.PropertyViewModelFactory">
            <summary>
              Gets or sets the property view model factory.
              This factory is used to generate the view model based on the property descriptors.
              You can override this factory to create the view model based on your own attributes.
            </summary>
            <value>The property view model factory.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.RequiredAttribute">
            <summary>
              Gets or sets the required attribute type.
              If the required attribute type is set, only properties where this attribute is set will be shown.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.SelectedObject">
            <summary>
              Gets or sets SelectedObject.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.SelectedObjects">
            <summary>
              Gets or sets SelectedObjects.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.ShowBoolHeader">
            <summary>
              Show enum properties as ComboBox or RadioButtonList.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.ShowCategoriesAs">
            <summary>
              Gets or sets ShowCategoriesAs.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.ShowReadOnlyProperties">
            <summary>
              Show read-only properties.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.ShowTabs">
            <summary>
              Organize the properties in tabs.
              You should use the [Category("Tabname|Groupname")] attribute to define the tabs.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.UseDefaultCategoryNameForUncategorizedProperties">
            <summary>
              Gets or sets a value indicating whether to use the default category for uncategorized properties.
              When this flag is false, the last defined category will be used.
              The default value is false.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyEditor.WarningTemplate">
            <summary>
              Gets or sets WarningTemplate.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.PropertyValueChangedEventArgs">
            <summary>
            Event args for the PropertyValueChanged event
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyValueChangedEventArgs.NewValue">
            <summary>
              Gets or sets NewValue.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyValueChangedEventArgs.OldValue">
            <summary>
              Gets or sets OldValue.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyValueChangedEventArgs.PropertyName">
            <summary>
              Gets or sets PropertyName.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.AttributeHelper">
            <summary>
            The attribute helper.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.AttributeHelper.ContainsAttributeOfType(System.ComponentModel.AttributeCollection,System.Type)">
            <summary>
            Check if an attribute collection contains an attribute of the given type
            </summary>
            <param name="attributes">
            The attributes.
            </param>
            <param name="attributeType">
            The type to check for.
            </param>
            <returns>
            The contains attribute of type.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.AttributeHelper.GetFirstAttribute``1(System.ComponentModel.PropertyDescriptor)">
            <summary>
            Return the first attribute of a given type for the specified property descriptor.
            </summary>
            <typeparam name="T">
            An attribute type.
            </typeparam>
            <param name="descriptor">
            The property descriptor.
            </param>
            <returns>
            The first attribute of the specified type.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.IPropertyViewModelFactory">
            <summary>
            The property view model factory interface.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.IPropertyViewModelFactory.CreateViewModel(System.Object,System.ComponentModel.PropertyDescriptor)">
            <summary>
            Create a PropertyViewModel for the given property.
              The ViewModel could be populated with data from local attributes.
            </summary>
            <param name="instance">
            </param>
            <param name="descriptor">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.EnumPropertyViewModel">
            <summary>
            The enum property view model.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.PropertyViewModel">
            <summary>
            The Property ViewModel
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.ViewModelBase">
            <summary>
            Base class for tabs, categories and properties
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ViewModelBase.#ctor(PropertyTools.Wpf.PropertyEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ViewModelBase"/> class.
            </summary>
            <param name="owner">
            The owner.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ViewModelBase.CompareTo(System.Object)">
            <summary>
            The compare to.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The compare to.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ViewModelBase.ToString">
            <summary>
            The to string.
            </summary>
            <returns>
            The to string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ViewModelBase.NotifyPropertyChanged(System.String)">
            <summary>
            The notify property changed.
            </summary>
            <param name="property">
            The property.
            </param>
        </member>
        <member name="E:PropertyTools.Wpf.ViewModelBase.PropertyChanged">
            <summary>
              The property changed.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ViewModelBase.Header">
            <summary>
              Gets or sets Header.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ViewModelBase.SortIndex">
            <summary>
              Gets or sets SortIndex.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ViewModelBase.ToolTip">
            <summary>
              Gets or sets ToolTip.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ViewModelBase.Owner">
            <summary>
              Gets Owner.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyViewModel.timeSpanFormatter">
            <summary>
              The time span formatter.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyViewModel.isEnabled">
            <summary>
              The is enabled.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyViewModel.isVisible">
            <summary>
              The is visible.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.PropertyViewModel.settingValues">
            <summary>
              The setting values.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.#ctor(System.Object,System.ComponentModel.PropertyDescriptor,PropertyTools.Wpf.PropertyEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.PropertyViewModel"/> class.
            </summary>
            <param name="instance">
            The instance being edited
            </param>
            <param name="descriptor">
            The property descriptor
            </param>
            <param name="owner">
            The parent PropertyEditor
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.BeginEdit">
            <summary>
            The begin edit.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.CancelEdit">
            <summary>
            The cancel edit.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.EndEdit">
            <summary>
            The end edit.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.SubscribeValueChanged">
            <summary>
            Subscribes to the ValueChanged event.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.UnsubscribeValueChanged">
            <summary>
            Unsubscribes the value changed event.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.UpdateErrorInfo">
            <summary>
            Updates the error/warning properties.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.FormatValue(System.Object)">
            <summary>
            The format value.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The format value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.GetValue(System.Object)">
            <summary>
            The get value.
            </summary>
            <param name="instance">
            The instance.
            </param>
            <returns>
            The get value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.GetValueFromEnumerable(System.Collections.IEnumerable)">
            <summary>
            The the current value from an IEnumerable instance
            </summary>
            <param name="componentList">
            </param>
            <returns>
            If all components in the enumerable are equal, it returns the value.
              If values are different, it returns null.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.SetValue(System.Object,System.Object)">
            <summary>
            The set value.
            </summary>
            <param name="instance">
            The instance.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.SubscribeValueChanged(System.ComponentModel.PropertyDescriptor,System.EventHandler)">
            <summary>
            Subscribes to the ValueChanged event.
            </summary>
            <param name="descriptor">
            The descriptor.
            </param>
            <param name="handler">
            The handler.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.UnsubscribeValueChanged(System.ComponentModel.PropertyDescriptor,System.EventHandler)">
            <summary>
            Unsubscribes the value changed event.
            </summary>
            <param name="descriptor">
            The descriptor.
            </param>
            <param name="handler">
            The handler.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.Convert(System.Object@)">
            <summary>
            The convert.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The convert.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.GetPropertyOwner(System.ComponentModel.PropertyDescriptor,System.Object)">
            <summary>
            The get property owner.
            </summary>
            <param name="descriptor">
            The descriptor.
            </param>
            <param name="instance">
            The instance.
            </param>
            <returns>
            The get property owner.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.InstancePropertyChanged(System.Object,System.EventArgs)">
            <summary>
            The instance property changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.IsEnabledChanged(System.Object,System.EventArgs)">
            <summary>
            The is enabled changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.IsHexFormatString(System.String)">
            <summary>
            The is hex format string.
            </summary>
            <param name="formatString">
            The format string.
            </param>
            <returns>
            The is hex format string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.IsModified(System.Object,System.Object)">
            <summary>
            The is modified.
            </summary>
            <param name="component">
            The component.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            The is modified.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyViewModel.IsVisibleChanged(System.Object,System.EventArgs)">
            <summary>
            The is visible changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.AcceptsReturn">
            <summary>
              Gets or sets a value indicating whether the property should be edited as multiline.
            </summary>
            <value><c>true</c> if multiline; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.AutoUpdateText">
            <summary>
              Gets or sets a value indicating whether this text property should use PropertyChanged as UpdateTrigger.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.Category">
            <summary>
              Gets the category.
            </summary>
            <value>The category.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.Description">
            <summary>
              Gets the description.
            </summary>
            <value>The description.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.Descriptor">
            <summary>
              Gets or sets the property descriptor.
            </summary>
            <value>The descriptor.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.DisplayName">
            <summary>
              Gets the display name.
            </summary>
            <value>The display name.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.FirstInstance">
            <summary>
              Gets the first instance if the Instance is an Enumerable, otherwise return the Instance.
            </summary>
            <value>The first instance.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.FormatString">
            <summary>
              Gets or sets the format string.
            </summary>
            <value>The format string.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.Height">
            <summary>
              Gets or sets the height of the editor for the property.
            </summary>
            <value>The height.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.Instance">
            <summary>
              Gets or sets the instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.Instances">
            <summary>
              Gets the instances or a single Instance as an Enumerable.
            </summary>
            <value>The instances.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.IsEnabled">
            <summary>
              Gets or sets a value indicating whether this property is enabled.
            </summary>
            <value>
              <c>true</c> if this instance is enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.IsEnabledDescriptor">
            <summary>
              Gets or sets the descriptor for the property's IsEnabled.
            </summary>
            <value>The is enabled descriptor.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.IsEnumerable">
            <summary>
              Gets or sets a value indicating whether this instance is enumerable.
            </summary>
            <value>
              <c>true</c> if this instance is enumerable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.IsReadOnly">
            <summary>
              Gets a value indicating whether this instance is read only.
            </summary>
            <value>
              <c>true</c> if this instance is read only; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.IsVisible">
            <summary>
              Gets or sets a value indicating whether this property is Visible.
            </summary>
            <value>
              <c>true</c> if this instance is Visible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.IsVisibleDescriptor">
            <summary>
              Gets or sets the descriptor for the property's IsVisible.
            </summary>
            <value>The is Visible descriptor.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.IsWriteable">
            <summary>
              Gets a value indicating whether this instance is writeable.
            </summary>
            <value>
              <c>true</c> if this instance is writeable; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.MaxLength">
            <summary>
              Gets or sets the max length of text.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.Name">
            <summary>
              Gets the name of the property.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.OldValue">
            <summary>
              Gets or sets OldValue.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.PropertyError">
            <summary>
              Gets the property error.
            </summary>
            <value>The property error.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.PropertyName">
            <summary>
              Gets the name of the property.
            </summary>
            <value>The name of the property.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.PropertyTemplateSelector">
            <summary>
              Gets the property template selector.
            </summary>
            <value>The property template selector.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.PropertyType">
            <summary>
              Gets the type of the property.
            </summary>
            <value>The type of the property.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.PropertyWarning">
            <summary>
              Gets the property warning.
            </summary>
            <value>The property warning.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.SetByThis">
            <summary>
              Gets or sets whether Value was set by this ViewModel
            </summary>
            <value>True if this ViewModel set Value, false otherwise</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.TextWrapping">
            <summary>
              Gets or sets the text wrapping for multiline strings.
            </summary>
            <value>The text wrapping mode.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.Value">
            <summary>
              Gets or sets the value of the property.
            </summary>
            <value>The value.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.Visibility">
            <summary>
              Gets the visibility of the property.
            </summary>
            <value>The visibility.</value>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.System#ComponentModel#IDataErrorInfo#Error">
            <summary>
              Gets Error.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyViewModel.System#ComponentModel#IDataErrorInfo#Item(System.String)">
            <summary>
              The i data error info.this.
            </summary>
            <param name = "columnName">
              The column name.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.EnumPropertyViewModel.#ctor(System.Object,System.ComponentModel.PropertyDescriptor,PropertyTools.Wpf.PropertyEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.EnumPropertyViewModel"/> class.
            </summary>
            <param name="instance">
            The instance.
            </param>
            <param name="descriptor">
            The descriptor.
            </param>
            <param name="owner">
            The owner.
            </param>
        </member>
        <member name="P:PropertyTools.Wpf.EnumPropertyViewModel.EnumValues">
            <summary>
              Gets EnumValues.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            </exception>
        </member>
        <member name="T:PropertyTools.Wpf.FilePathPropertyViewModel">
            <summary>
            The file path property view model.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.FilePathPropertyViewModel.#ctor(System.Object,System.ComponentModel.PropertyDescriptor,PropertyTools.Wpf.PropertyEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.FilePathPropertyViewModel"/> class.
            </summary>
            <param name="instance">
            The instance.
            </param>
            <param name="descriptor">
            The descriptor.
            </param>
            <param name="owner">
            The owner.
            </param>
        </member>
        <member name="P:PropertyTools.Wpf.FilePathPropertyViewModel.BrowseCommand">
            <summary>
              Gets or sets BrowseCommand.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.FilePathPropertyViewModel.DefaultExtension">
            <summary>
              Gets or sets DefaultExtension.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.FilePathPropertyViewModel.FileDialogService">
            <summary>
              Gets FileDialogService.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.FilePathPropertyViewModel.Filter">
            <summary>
              Gets or sets Filter.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.FilePathPropertyViewModel.UseOpenDialog">
            <summary>
              Gets or sets a value indicating whether UseOpenDialog.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.DirectoryPathPropertyViewModel">
            <summary>
            The directory path property view model.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DirectoryPathPropertyViewModel.#ctor(System.Object,System.ComponentModel.PropertyDescriptor,PropertyTools.Wpf.PropertyEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.DirectoryPathPropertyViewModel"/> class.
            </summary>
            <param name="instance">
            The instance.
            </param>
            <param name="descriptor">
            The descriptor.
            </param>
            <param name="owner">
            The owner.
            </param>
        </member>
        <member name="P:PropertyTools.Wpf.DirectoryPathPropertyViewModel.BrowseCommand">
            <summary>
              Gets or sets BrowseCommand.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.DirectoryPathPropertyViewModel.FolderBrowserDialogService">
            <summary>
              Gets FolderBrowserDialogService.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.PasswordPropertyViewModel">
            <summary>
            The password property view model.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PasswordPropertyViewModel.#ctor(System.Object,System.ComponentModel.PropertyDescriptor,PropertyTools.Wpf.PropertyEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.PasswordPropertyViewModel"/> class.
            </summary>
            <param name="instance">
            The instance.
            </param>
            <param name="descriptor">
            The descriptor.
            </param>
            <param name="owner">
            The owner.
            </param>
        </member>
        <member name="T:PropertyTools.Wpf.OptionalPropertyViewModel">
            <summary>
            Properties that are nullable or marked [Optional(...)] are enabled/disabled by a checkbox
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.OptionalPropertyViewModel.optionalDescriptor">
            <summary>
              The optional descriptor.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.OptionalPropertyViewModel.enabledButHasNoValue">
            <summary>
              The enabled but has no value.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.OptionalPropertyViewModel.previousValue">
            <summary>
              The previous value.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.OptionalPropertyViewModel.#ctor(System.Object,System.ComponentModel.PropertyDescriptor,System.String,PropertyTools.Wpf.PropertyEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.OptionalPropertyViewModel"/> class.
            </summary>
            <param name="instance">
            The instance.
            </param>
            <param name="descriptor">
            The descriptor.
            </param>
            <param name="optionalPropertyName">
            The optional property name.
            </param>
            <param name="owner">
            The owner.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.OptionalPropertyViewModel.#ctor(System.Object,System.ComponentModel.PropertyDescriptor,System.ComponentModel.PropertyDescriptor,PropertyTools.Wpf.PropertyEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.OptionalPropertyViewModel"/> class.
            </summary>
            <param name="instance">
            The instance.
            </param>
            <param name="descriptor">
            The descriptor.
            </param>
            <param name="optionalDescriptor">
            The optional descriptor.
            </param>
            <param name="owner">
            The owner.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.OptionalPropertyViewModel.SubscribeValueChanged">
            <summary>
            The subscribe value changed.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.OptionalPropertyViewModel.UnsubscribeValueChanged">
            <summary>
            The unsubscribe value changed.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.OptionalPropertyViewModel.GetDescriptor(System.Object,System.String)">
            <summary>
            The get descriptor.
            </summary>
            <param name="instance">
            The instance.
            </param>
            <param name="propertyName">
            The property name.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.OptionalPropertyViewModel.IsOptionalChanged(System.Object,System.EventArgs)">
            <summary>
            The is optional changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="P:PropertyTools.Wpf.OptionalPropertyViewModel.IsOptionalChecked">
            <summary>
              Gets or sets a value indicating whether IsOptionalChecked.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.OptionalPropertyViewModel.IsPropertyNullable">
            <summary>
              Gets a value indicating whether IsPropertyNullable.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.OptionalPropertyViewModel.OptionalPropertyName">
            <summary>
              Gets OptionalPropertyName.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.DefaultPropertyViewModelFactory">
            <summary>
            The default property view model factory.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.DefaultPropertyViewModelFactory.owner">
            <summary>
              The owner.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyViewModelFactory.#ctor(PropertyTools.Wpf.PropertyEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.DefaultPropertyViewModelFactory"/> class.
            </summary>
            <param name="owner">
            The owner PropertyEditor of the factory. 
              This is neccessary in order to get the PropertyTemplateSelector to work.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyViewModelFactory.CreateViewModel(System.Object,System.ComponentModel.PropertyDescriptor)">
            <summary>
            The create view model.
            </summary>
            <param name="instance">
            The instance.
            </param>
            <param name="descriptor">
            The descriptor.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyViewModelFactory.IsResettable(System.ComponentModel.PropertyDescriptor)">
            <summary>
            The is resettable.
            </summary>
            <param name="descriptor">
            The descriptor.
            </param>
            <returns>
            The is resettable.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyViewModelFactory.GetFormatString(System.ComponentModel.PropertyDescriptor)">
            <summary>
            The get format string.
            </summary>
            <param name="descriptor">
            The descriptor.
            </param>
            <returns>
            The get format string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyViewModelFactory.GetHeight(System.ComponentModel.PropertyDescriptor)">
            <summary>
            The get height.
            </summary>
            <param name="descriptor">
            The descriptor.
            </param>
            <returns>
            The get height.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyViewModelFactory.GetMaxLength(System.ComponentModel.PropertyDescriptor)">
            <summary>
            The get max length.
            </summary>
            <param name="descriptor">
            The descriptor.
            </param>
            <returns>
            The get max length.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyViewModelFactory.IsAutoUpdatingText(System.ComponentModel.PropertyDescriptor)">
            <summary>
            The is auto updating text.
            </summary>
            <param name="descriptor">
            The descriptor.
            </param>
            <returns>
            The is auto updating text.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyViewModelFactory.IsDirectoryPath(System.ComponentModel.PropertyDescriptor)">
            <summary>
            The is directory path.
            </summary>
            <param name="descriptor">
            The descriptor.
            </param>
            <returns>
            The is directory path.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyViewModelFactory.IsEnum(System.ComponentModel.PropertyDescriptor)">
            <summary>
            The is enum.
            </summary>
            <param name="descriptor">
            The descriptor.
            </param>
            <returns>
            The is enum.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyViewModelFactory.IsFilePath(System.ComponentModel.PropertyDescriptor,System.String@,System.String@,System.Boolean@)">
            <summary>
            The is file path.
            </summary>
            <param name="descriptor">
            The descriptor.
            </param>
            <param name="filter">
            The filter.
            </param>
            <param name="defaultExtension">
            The default extension.
            </param>
            <param name="useOpenDialog">
            The use open dialog.
            </param>
            <returns>
            The is file path.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyViewModelFactory.IsMultilineText(System.ComponentModel.PropertyDescriptor)">
            <summary>
            The is multiline text.
            </summary>
            <param name="descriptor">
            The descriptor.
            </param>
            <returns>
            The is multiline text.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyViewModelFactory.IsOptional(System.ComponentModel.PropertyDescriptor,System.String@)">
            <summary>
            The is optional.
            </summary>
            <param name="descriptor">
            The descriptor.
            </param>
            <param name="optionalPropertyName">
            The optional property name.
            </param>
            <returns>
            The is optional.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyViewModelFactory.IsPassword(System.ComponentModel.PropertyDescriptor)">
            <summary>
            The is password.
            </summary>
            <param name="descriptor">
            The descriptor.
            </param>
            <returns>
            The is password.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyViewModelFactory.IsSlidable(System.ComponentModel.PropertyDescriptor,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Boolean@,System.Windows.Controls.Primitives.TickPlacement@)">
            <summary>
            The is slidable.
            </summary>
            <param name="descriptor">
            The descriptor.
            </param>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <param name="largeChange">
            The large change.
            </param>
            <param name="smallChange">
            The small change.
            </param>
            <param name="tickFrequency">
            The tick frequency.
            </param>
            <param name="snapToTicks">
            The snap to ticks.
            </param>
            <param name="tickPlacement">
            The tick placement.
            </param>
            <returns>
            The is slidable.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.DefaultPropertyViewModelFactory.IsWide(System.ComponentModel.PropertyDescriptor,System.Boolean@)">
            <summary>
            The is wide.
            </summary>
            <param name="descriptor">
            The descriptor.
            </param>
            <param name="showHeader">
            The show header.
            </param>
            <returns>
            The is wide.
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.DefaultPropertyViewModelFactory.IsEnabledPattern">
            <summary>
              Gets or sets the IsEnabledPattern.
            
              Example using a "Is{0}Enabled" pattern:
              string City { get; set; }
              bool IsCityEnabled { get; set; }
              The state of the City property will be controlled by the IsCityEnabled property
            </summary>
            <value>The IsEnabledPattern.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DefaultPropertyViewModelFactory.IsVisiblePattern">
            <summary>
              Gets or sets the IsVisiblePattern.
            
              Example using a "Is{0}Visible" pattern:
              string City { get; set; }
              bool IsCityVisible { get; set; }
              The visibility state of the City property will be controlled by the IsCityVisible property
            </summary>
            <value>The IsVisiblePattern.</value>
        </member>
        <member name="P:PropertyTools.Wpf.DefaultPropertyViewModelFactory.UsePropertyPattern">
            <summary>
              Gets or sets the UsePattern. This is used to create an "Optional" property.
            
              Example using a "Use{0}" pattern:
              string City { get; set; }
              bool UseCity { get; set; }
              The optional state of the City property will be controlled by the UseCity property
            </summary>
            <value>The UsePropertyPattern.</value>
        </member>
        <member name="T:PropertyTools.Wpf.SlidablePropertyViewModel">
            <summary>
            Properties marked [Slidable] are using a slider
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SlidablePropertyViewModel.#ctor(System.Object,System.ComponentModel.PropertyDescriptor,PropertyTools.Wpf.PropertyEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.SlidablePropertyViewModel"/> class.
            </summary>
            <param name="instance">
            The instance.
            </param>
            <param name="descriptor">
            The descriptor.
            </param>
            <param name="owner">
            The owner.
            </param>
        </member>
        <member name="P:PropertyTools.Wpf.SlidablePropertyViewModel.DoubleValue">
            <summary>
              Gets or sets DoubleValue.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.SlidablePropertyViewModel.SliderLargeChange">
            <summary>
              Gets or sets SliderLargeChange.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.SlidablePropertyViewModel.SliderMaximum">
            <summary>
              Gets or sets SliderMaximum.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.SlidablePropertyViewModel.SliderMinimum">
            <summary>
              Gets or sets SliderMinimum.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.SlidablePropertyViewModel.SliderSmallChange">
            <summary>
              Gets or sets SliderSmallChange.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.SlidablePropertyViewModel.SliderSnapToTicks">
            <summary>
              Gets or sets a value indicating whether SliderSnapToTicks.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.SlidablePropertyViewModel.SliderTickFrequency">
            <summary>
              Gets or sets SliderTickFrequency.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.SlidablePropertyViewModel.SliderTickPlacement">
            <summary>
              Gets or sets SliderTickPlacement.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.ResettablePropertyViewModel">
            <summary>
            Properties that are marked [resettable(...)] have a reset button
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ResettablePropertyViewModel.instance">
            <summary>
              The instance.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ResettablePropertyViewModel.resettableDescriptor">
            <summary>
              The resettable descriptor.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ResettablePropertyViewModel.#ctor(System.Object,System.ComponentModel.PropertyDescriptor,PropertyTools.Wpf.PropertyEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ResettablePropertyViewModel"/> class.
            </summary>
            <param name="instance">
            The instance.
            </param>
            <param name="descriptor">
            The descriptor.
            </param>
            <param name="owner">
            The owner.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.ResettablePropertyViewModel.ExecuteReset">
            <summary>
            The execute reset.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ResettablePropertyViewModel.Label">
            <summary>
              Gets or sets Label.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ResettablePropertyViewModel.ResetCommand">
            <summary>
              Gets or sets BrowseCommand.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ResettablePropertyViewModel.ResettablePropertyName">
            <summary>
              Gets ResettablePropertyName.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.CheckBoxPropertyViewModel">
            <summary>
            The check box property view model.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.CheckBoxPropertyViewModel.#ctor(System.Object,System.ComponentModel.PropertyDescriptor,PropertyTools.Wpf.PropertyEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.CheckBoxPropertyViewModel"/> class.
            </summary>
            <param name="instance">
            The instance.
            </param>
            <param name="descriptor">
            The descriptor.
            </param>
            <param name="owner">
            The owner.
            </param>
        </member>
        <member name="T:PropertyTools.Wpf.WidePropertyViewModel">
            <summary>
            Properties marked [WideProperty] are using the full width of the control
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.WidePropertyViewModel.#ctor(System.Object,System.ComponentModel.PropertyDescriptor,System.Boolean,PropertyTools.Wpf.PropertyEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.WidePropertyViewModel"/> class.
            </summary>
            <param name="instance">
            The instance.
            </param>
            <param name="descriptor">
            The descriptor.
            </param>
            <param name="showHeader">
            The show header.
            </param>
            <param name="owner">
            The owner.
            </param>
        </member>
        <member name="P:PropertyTools.Wpf.WidePropertyViewModel.HeaderVisibility">
            <summary>
              Gets HeaderVisibility.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.PropertyTemplateSelector">
            <summary>
            The PropertyTemplateSelector is used to select a DataTemplate given an PropertyViewModel instance.
              The DataTemplates should be defined in the BasicEditors.xaml/ExtendedEditors.xaml
              or in the Editors collection of the PropertyEditor.
              This Selector can also be overriden if you want to provide custom selecting implementation.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyTemplateSelector.#ctor(PropertyTools.Wpf.PropertyEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.PropertyTemplateSelector"/> class.
            </summary>
            <param name="owner">
            The owner.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyTemplateSelector.SelectTemplate(System.Object,System.Windows.DependencyObject)">
            <summary>
            The select template.
            </summary>
            <param name="item">
            The item.
            </param>
            <param name="container">
            The container.
            </param>
            <returns>
            </returns>
            <exception cref="T:System.ArgumentException">
            </exception>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyTemplateSelector.TryToFindDataTemplate(System.Windows.FrameworkElement,System.String)">
            <summary>
            The try to find data template.
            </summary>
            <param name="element">
            The element.
            </param>
            <param name="key">
            The key.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyTemplateSelector.TryToFindDataTemplate(System.Windows.FrameworkElement,System.Type)">
            <summary>
            The try to find data template.
            </summary>
            <param name="element">
            The element.
            </param>
            <param name="type">
            The type.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.PropertyTemplateSelector.FindDataTemplate(PropertyTools.Wpf.PropertyViewModel,System.Windows.FrameworkElement)">
            <summary>
            The find data template.
            </summary>
            <param name="propertyViewModel">
            The property view model.
            </param>
            <param name="element">
            The element.
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyTemplateSelector.Editors">
            <summary>
              Gets or sets Editors.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyTemplateSelector.Owner">
            <summary>
              Gets Owner.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.PropertyTemplateSelector.TemplateOwner">
            <summary>
              Gets or sets TemplateOwner.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.TypeEditor">
            <summary>
            Define a data template for the specified type.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TypeEditor.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.TypeEditor"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TypeEditor.#ctor(System.Type,System.Windows.DataTemplate)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.TypeEditor"/> class.
            </summary>
            <param name="editedType">
            Type to edit.
            </param>
            <param name="editorTemplate">
            The data template.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TypeEditor.IsAssignable(System.Type)">
            <summary>
            Determines whether the specified type is assignable to the EditedType.
            </summary>
            <param name="type">
            The type.
            </param>
            <returns>
            <c>true</c> if the specified type is assignable; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.TypeEditor.EditedType">
            <summary>
              Gets or sets the type to edit.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TypeEditor.EditorTemplate">
            <summary>
              Gets or sets template for this type.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.CategoryViewModel">
            <summary>
            ViewModel for categories.
              The categories can be shown as GroupBox, Expander or by the Header.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CategoryViewModel.isEnabled">
            <summary>
              The is enabled.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.CategoryViewModel.#ctor(System.String,PropertyTools.Wpf.PropertyEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.CategoryViewModel"/> class.
            </summary>
            <param name="categoryName">
            The category name.
            </param>
            <param name="owner">
            The owner.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.CategoryViewModel.Sort">
            <summary>
            The sort.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.CategoryViewModel.IsEnabled">
            <summary>
              Gets or sets a value indicating whether IsEnabled.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.CategoryViewModel.Name">
            <summary>
              Gets or sets Name.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.CategoryViewModel.Properties">
            <summary>
              Gets Properties.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.CategoryViewModel.Visibility">
            <summary>
              Gets Visibility.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.TabViewModel">
            <summary>
            ViewModel for the tabs.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TabViewModel.#ctor(System.String,PropertyTools.Wpf.PropertyEditor)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.TabViewModel"/> class.
            </summary>
            <param name="tabName">
            The tab name.
            </param>
            <param name="owner">
            The owner.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TabViewModel.Sort">
            <summary>
            The sort.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TabViewModel.UpdateErrorInfo">
            <summary>
            The update error info.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TabViewModel.Categories">
            <summary>
              Gets Categories.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TabViewModel.CategoryTemplateSelector">
            <summary>
              Gets CategoryTemplateSelector.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TabViewModel.HasErrors">
            <summary>
              Gets a value indicating whether HasErrors.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TabViewModel.HasWarnings">
            <summary>
              Gets a value indicating whether HasWarnings.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TabViewModel.Icon">
            <summary>
              Gets or sets Icon.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TabViewModel.IconVisibility">
            <summary>
              Gets IconVisibility.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TabViewModel.Name">
            <summary>
              Gets or sets Name.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.AutoFiller">
            <summary>
            The auto filler.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.AutoFiller.GetCellValue">
            <summary>
              The get cell value.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.AutoFiller.TrySetCellValue">
            <summary>
              The try set cell value.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.AutoFiller.#ctor(System.Func{PropertyTools.Wpf.CellRef,System.Object},System.Func{PropertyTools.Wpf.CellRef,System.Object,System.Boolean})">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.AutoFiller"/> class.
            </summary>
            <param name="getCellValue">
            The get cell value.
            </param>
            <param name="trySetCellValue">
            The try set cell value.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.AutoFiller.AutoFill(PropertyTools.Wpf.CellRef,PropertyTools.Wpf.CellRef,PropertyTools.Wpf.CellRef)">
            <summary>
            The auto fill.
            </summary>
            <param name="currentCell">
            The current cell.
            </param>
            <param name="selectionCell">
            The selection cell.
            </param>
            <param name="autoFillRef">
            The auto fill ref.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.AutoFiller.TryExtrapolate(PropertyTools.Wpf.CellRef,PropertyTools.Wpf.CellRef,PropertyTools.Wpf.CellRef,PropertyTools.Wpf.CellRef,System.Object@)">
            <summary>
            The try extrapolate.
            </summary>
            <param name="cell">
            The cell.
            </param>
            <param name="currentCell">
            The current cell.
            </param>
            <param name="selectionCell">
            The selection cell.
            </param>
            <param name="autoFillRef">
            The auto fill ref.
            </param>
            <param name="result">
            The result.
            </param>
            <returns>
            The try extrapolate.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.AutoFiller.PeriodicClamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clamps i between i0 and i1.
            </summary>
            <param name="i">
            The input.
            </param>
            <param name="i0">
            The minimum value.
            </param>
            <param name="i1">
            The maximum value.
            </param>
            <returns>
            The periodic clamp.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.AutoFiller.TryExtrapolate(PropertyTools.Wpf.CellRef,PropertyTools.Wpf.CellRef,PropertyTools.Wpf.CellRef,System.Object@)">
            <summary>
            The try extrapolate.
            </summary>
            <param name="cell">
            The cell.
            </param>
            <param name="p1">
            The p 1.
            </param>
            <param name="p2">
            The p 2.
            </param>
            <param name="result">
            The result.
            </param>
            <returns>
            The try extrapolate.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.CellRef">
            <summary>
            The cell ref.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CellRef.column">
            <summary>
              The column.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.CellRef.row">
            <summary>
              The row.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.CellRef.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.CellRef"/> struct.
            </summary>
            <param name="row">
            The row.
            </param>
            <param name="column">
            The column.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.CellRef.ToColumnName(System.Int32)">
            <summary>
            Converts a column number to a column name.
            </summary>
            <param name="column">
            The column.
            </param>
            <returns>
            The to column name.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CellRef.ToRowName(System.Int32)">
            <summary>
            Converts a row number to a row name.
            </summary>
            <param name="row">
            The row.
            </param>
            <returns>
            The to row name.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CellRef.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CellRef.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.CellRef.Column">
            <summary>
              Gets or sets Column.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.CellRef.Row">
            <summary>
              Gets or sets Row.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.CellRefConverter">
            <summary>
            The cell ref converter.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.CellRefConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value produced by the binding source.
            </param>
            <param name="targetType">
            The type of the binding target property.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.CellRefConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value that is produced by the binding target.
            </param>
            <param name="targetType">
            The type to convert to.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.ColumnDefinition">
            <summary>
            The column definition.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColumnDefinition.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.ColumnDefinition"/> class.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.ColumnDefinition.CanDelete">
            <summary>
              Gets or sets a value indicating whether this instance can delete.
            </summary>
            <value>
              <c>true</c> if this instance can delete; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.ColumnDefinition.CanResize">
            <summary>
              Gets or sets a value indicating whether this instance can resize.
            </summary>
            <value>
              <c>true</c> if this instance can resize; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.ColumnDefinition.DataField">
            <summary>
              Gets or sets the data field.
            </summary>
            <remarks>
              Note: This is not used if DisplayTemplate/EditTemplate is set.
            </remarks>
            <value>The data field.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColumnDefinition.DisplayTemplate">
            <summary>
              Gets or sets the display template.
            </summary>
            <value>The display template.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColumnDefinition.EditTemplate">
            <summary>
              Gets or sets the edit template.
            </summary>
            <value>The edit template.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColumnDefinition.FormatString">
            <summary>
              Gets or sets the format string.
            </summary>
            <value>The string format.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColumnDefinition.Header">
            <summary>
              Gets or sets the header.
            </summary>
            <value>The header.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColumnDefinition.HorizontalAlignment">
            <summary>
              Gets or sets the horizontal alignment.
            </summary>
            <value>The horizontal alignment.</value>
        </member>
        <member name="P:PropertyTools.Wpf.ColumnDefinition.Width">
            <summary>
              Gets or sets the width.
            </summary>
            <value>The width.</value>
        </member>
        <member name="T:PropertyTools.Wpf.SimpleGrid">
            <summary>
            The simple grid.
            </summary>
            <summary>
            Represents a datagrid with a spreadsheet style.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.PART_AutoFillBox">
            <summary>
              The par t_ auto fill box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.PART_AutoFillSelection">
            <summary>
              The par t_ auto fill selection.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.PART_ColumnGrid">
            <summary>
              The par t_ column grid.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.PART_ColumnScroller">
            <summary>
              The par t_ column scroller.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.PART_ColumnSelectionBackground">
            <summary>
              The par t_ column selection background.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.PART_CurrentBackground">
            <summary>
              The par t_ current background.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.PART_EnumEditor">
            <summary>
              The par t_ enum editor.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.PART_Grid">
            <summary>
              The par t_ grid.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.PART_RowGrid">
            <summary>
              The par t_ row grid.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.PART_RowScroller">
            <summary>
              The par t_ row scroller.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.PART_RowSelectionBackground">
            <summary>
              The par t_ row selection background.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.PART_Selection">
            <summary>
              The par t_ selection.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.PART_SelectionBackground">
            <summary>
              The par t_ selection background.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.PART_SheetGrid">
            <summary>
              The par t_ sheet grid.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.PART_SheetScroller">
            <summary>
              The par t_ sheet scroller.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.PART_TextEditor">
            <summary>
              The par t_ text editor.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.PART_TopLeft">
            <summary>
              The par t_ top left.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.AddItemHeaderProperty">
            <summary>
              The add item header property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.AlternatingRowsBackgroundProperty">
            <summary>
              The alternating rows background property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.AutoGenerateColumnsProperty">
            <summary>
              The auto generate columns property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.AutoSizeColumnsProperty">
            <summary>
              The auto size columns property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.CanDeleteProperty">
            <summary>
              The can delete property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.CanInsertProperty">
            <summary>
              The can insert property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.CanResizeColumnsProperty">
            <summary>
              The can resize columns property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.ContentProperty">
            <summary>
              The content property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.CurrentCellProperty">
            <summary>
              The current cell property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.DefaultColumnWidthProperty">
            <summary>
              The default column width property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.DefaultHorizontalAlignmentProperty">
            <summary>
              The default horizontal alignment property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.DefaultRowHeightProperty">
            <summary>
              The default row height property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.EasyInsertProperty">
            <summary>
              The easy insert property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.GridLineBrushProperty">
            <summary>
              The grid line brush property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.HeaderBorderBrushProperty">
            <summary>
              The header border brush property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.IsVirtualizingProperty">
            <summary>
              The is virtualizing property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.ItemsInColumnsProperty">
            <summary>
              The items in columns property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.RowHeaderWidthProperty">
            <summary>
              The row header width property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.RowHeadersProperty">
            <summary>
              The row headers property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.SelectedItemsProperty">
            <summary>
              The selected items property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.SelectionCellProperty">
            <summary>
              The selection cell property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.typeDefinitions">
            <summary>
              The type definitions.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.columnDefinitions">
            <summary>
              The column definitions.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.CoerceCurrentCell(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the current cell.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="basevalue">
            The basevalue.
            </param>
            <returns>
            The coerced current cell.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.CoerceSelectionCell(System.Windows.DependencyObject,System.Object)">
            <summary>
            Coerces the selection cell.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="basevalue">
            The basevalue.
            </param>
            <returns>
            The coerced selection cell.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.ContentChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The content changed.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.CurrentCellChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The current cell changed.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.SelectionCellChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The selection cell changed.
            </summary>
            <param name="d">
            The d.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.OnCurrentCellChanged">
            <summary>
            The on current cell changed.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.OnSelectedCellsChanged">
            <summary>
            The selected cells changed.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.OnSelectionCellChanged">
            <summary>
            The on selection cell changed.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.SetColumnDefinitions``1(System.Collections.Generic.IList{``0},System.Action{``0,PropertyTools.Wpf.ColumnDefinition})">
            <summary>
            Sets the column definitions.
            </summary>
            <typeparam name="T">
            Definition type to change.
            </typeparam>
            <param name="values">
            The values.
            </param>
            <param name="setter">
            The setter.
            </param>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.cellMap">
            <summary>
              The cell map.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.autoFillBox">
            <summary>
              The auto fill box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.autoFillCell">
            <summary>
              The auto fill cell.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.autoFillSelection">
            <summary>
              The auto fill selection.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.autoFillToolTip">
            <summary>
              The auto fill tool tip.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.autoFiller">
            <summary>
              The auto filler.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.cellInsertionIndex">
            <summary>
              The cell insertion index.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.columnGrid">
            <summary>
              The column grid.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.columnScroller">
            <summary>
              The column scroller.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.columnSelectionBackground">
            <summary>
              The column selection background.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.contentEditor">
            <summary>
              The content editor.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.currentBackground">
            <summary>
              The current background.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.editingCells">
            <summary>
              The editing cells.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.endPressed">
            <summary>
              The end pressed.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.enumEditor">
            <summary>
              The enum editor.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.grid">
            <summary>
              The grid.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.isCapturing">
            <summary>
              The is capturing.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.isSelectingColumns">
            <summary>
              The is selecting columns.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.isSelectingRows">
            <summary>
              The is selecting rows.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.rowGrid">
            <summary>
              The row grid.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.rowScroller">
            <summary>
              The row scroller.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.rowSelectionBackground">
            <summary>
              The row selection background.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.selection">
            <summary>
              The selection.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.selectionBackground">
            <summary>
              The selection background.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.sheetGrid">
            <summary>
              The sheet grid.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.sheetScroller">
            <summary>
              The sheet scroller.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.subcribedContent">
            <summary>
              The subcribed content.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.textEditor">
            <summary>
              The text editor.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.SimpleGrid.topleft">
            <summary>
              The topleft.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.#cctor">
            <summary>
              Initializes static members of the <see cref="T:PropertyTools.Wpf.SimpleGrid"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.AutoSizeAllColumns">
            <summary>
            The auto size all columns.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.AutoSizeColumn(System.Int32)">
            <summary>
            The auto size column.
            </summary>
            <param name="column">
            The column.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.CancelTextEdit">
            <summary>
            The cancel text edit.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.Copy">
            <summary>
            The copy.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.Copy(System.String)">
            <summary>
            The copy.
            </summary>
            <param name="separator">
            The separator.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.DeleteItem(System.Int32,System.Boolean)">
            <summary>
            The delete item.
            </summary>
            <param name="index">
            The index.
            </param>
            <param name="updateGrid">
            The update grid.
            </param>
            <returns>
            The delete item.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.EndTextEdit">
            <summary>
            The end text edit.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetCell(System.Windows.Point)">
            <summary>
            The get cell.
            </summary>
            <param name="position">
            The position.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetCellElement(PropertyTools.Wpf.CellRef)">
            <summary>
            The get cell element.
            </summary>
            <param name="cellRef">
            The cell ref.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetCellString(PropertyTools.Wpf.CellRef)">
            <summary>
            The get cell string.
            </summary>
            <param name="cell">
            The cell.
            </param>
            <returns>
            The get cell string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetCellValue(PropertyTools.Wpf.CellRef)">
            <summary>
            Gets the cell value from the Content property for the specified cell.
            </summary>
            <param name="cell">
            The cell reference.
            </param>
            <returns>
            The get cell value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetPosition(PropertyTools.Wpf.CellRef)">
            <summary>
            The get position.
            </summary>
            <param name="cellRef">
            The cell ref.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetVisibleCells(PropertyTools.Wpf.CellRef@,PropertyTools.Wpf.CellRef@)">
            <summary>
            The get visible cells.
            </summary>
            <param name="topLeft">
            The top left.
            </param>
            <param name="bottomRight">
            The bottom right.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.HideEditor">
            <summary>
            The hide editor.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.InsertItem(System.Int32,System.Boolean)">
            <summary>
            The insert item.
            </summary>
            <param name="index">
            The index.
            </param>
            <param name="updateGrid">
            The update grid.
            </param>
            <returns>
            The insert item.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.MoveCurrentCell(System.Int32,System.Int32)">
            <summary>
            The move current cell.
            </summary>
            <param name="deltaRows">
            The delta rows.
            </param>
            <param name="deltaColumns">
            The delta columns.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.OnApplyTemplate">
            <summary>
            The on apply template.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.Paste">
            <summary>
            The paste.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.ScrollIntoView(PropertyTools.Wpf.CellRef)">
            <summary>
            The scroll into view.
            </summary>
            <param name="cellRef">
            The cell ref.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.ShowComboBoxEditor">
            <summary>
            The show combo box editor.
            </summary>
            <returns>
            The show combo box editor.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.ShowEditor">
            <summary>
            The show editor.
            </summary>
            <returns>
            The show editor.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.ShowTextBoxEditor">
            <summary>
            The show text box editor.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.ToCsv(System.String)">
            <summary>
            The to csv.
            </summary>
            <param name="separator">
            The separator.
            </param>
            <returns>
            The to csv.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.TrySetCellValue(PropertyTools.Wpf.CellRef,System.Object)">
            <summary>
            The try set cell value.
            </summary>
            <param name="cell">
            The cell.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            The try set cell value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.CreateElement(PropertyTools.Wpf.CellRef,System.Object)">
            <summary>
            The create element.
            </summary>
            <param name="cell">
            The cell.
            </param>
            <param name="item">
            The item.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.CreateInstance(System.Type)">
            <summary>
            The create instance.
            </summary>
            <param name="itemType">
            The item type.
            </param>
            <returns>
            The create instance.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GenerateColumnDefinitions(System.Collections.IEnumerable)">
            <summary>
            The generate column definitions.
            </summary>
            <param name="items">
            The items.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetCellAlternatives(PropertyTools.Wpf.CellRef,System.Object)">
            <summary>
            Gets the alternative values for the cell.
            </summary>
            <param name="cell">
            The cell.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetIndexOfItem(System.Object)">
            <summary>
            Gets the index of the specified item in the Content enumerable.
            </summary>
            <param name="item">
            The item.
            </param>
            <returns>
            The get index of item.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.IsCellVisible(PropertyTools.Wpf.CellRef)">
            <summary>
            The is cell visible.
            </summary>
            <param name="cell">
            The cell.
            </param>
            <returns>
            The is cell visible.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            The on key down.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The on mouse left button down.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The on mouse left button up.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.OnMouseMove(System.Windows.Input.MouseEventArgs)">
            <summary>
            The on mouse move.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)">
            <summary>
            The on preview mouse wheel.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.OnTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <summary>
            The on text input.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.UpdateAllCells">
            <summary>
            The update all cells.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.UpdateCellContent(PropertyTools.Wpf.CellRef)">
            <summary>
            The update cell content.
            </summary>
            <param name="cellRef">
            The cell ref.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.VirtualizeCells">
            <summary>
            Virtualizes the UIElements for the visible cells.
              Adds elements for the visible cells not currently in the logical tree.
              Removes elements for the nonvisible cells.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            The clamp.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="min">
            The min.
            </param>
            <param name="max">
            The max.
            </param>
            <returns>
            The clamp.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.CsvEncodeString(System.String)">
            <summary>
            The csv encode string.
            </summary>
            <param name="cell">
            The cell.
            </param>
            <returns>
            The csv encode string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.FormatValue(System.Object,System.String)">
            <summary>
            The format value.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="formatString">
            The format string.
            </param>
            <returns>
            The format value.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetListItemType(System.Collections.IEnumerable)">
            <summary>
            The get list item type.
            </summary>
            <param name="list">
            The list.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetListItemType(System.Type)">
            <summary>
            The get list item type.
            </summary>
            <param name="listType">
            The list type.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.SetElementPosition(System.Windows.UIElement,PropertyTools.Wpf.CellRef)">
            <summary>
            The set element position.
            </summary>
            <param name="element">
            The element.
            </param>
            <param name="cell">
            The cell.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.TextToArray(System.String)">
            <summary>
            The text to array.
            </summary>
            <param name="text">
            The text.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.ToTextAlignment(System.Windows.HorizontalAlignment)">
            <summary>
            Convert a HorizontalAlignment to a TextAlignment.
            </summary>
            <param name="a">
            The a.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.TryConvert(System.Object,System.Type,System.Object@)">
            <summary>
            The try convert.
            </summary>
            <param name="value">
            The value.
            </param>
            <param name="targetType">
            The target type.
            </param>
            <param name="convertedValue">
            The converted value.
            </param>
            <returns>
            The try convert.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.AddCellElement(PropertyTools.Wpf.CellRef,System.Object)">
            <summary>
            The add cell element.
            </summary>
            <param name="cellRef">
            The cell ref.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.AddItemCellMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The add item cell mouse left button down.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.AutoFillBoxMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The auto fill box mouse left button down.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.BuildContextMenus">
            <summary>
            The build context menus.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.CellChecked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The cell checked.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.ColumnGridLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The column grid loaded.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.ColumnGridMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The column grid mouse left button down.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.ColumnGridMouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The column grid mouse left button up.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.ColumnGridMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            The column grid mouse move.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.ColumnGridSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            The column grid size changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.ColumnScrollerChanged(System.Object,System.Windows.Controls.ScrollChangedEventArgs)">
            <summary>
            The column scroller changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.ColumnSplitterChangeCompleted(System.Object,System.Windows.Controls.Primitives.DragCompletedEventArgs)">
            <summary>
            The column splitter change completed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="dragCompletedEventArgs">
            The drag completed event args.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.ColumnSplitterChangeDelta(System.Object,System.Windows.Controls.Primitives.DragDeltaEventArgs)">
            <summary>
            The column splitter change delta.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.ColumnSplitterChangeStarted(System.Object,System.Windows.Controls.Primitives.DragStartedEventArgs)">
            <summary>
            The column splitter change started.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="dragStartedEventArgs">
            The drag started event args.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.ColumnSplitterDoubleClick(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The column splitter double click.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.CopyExecute(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            The copy execute.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.CreateBinding(PropertyTools.Wpf.CellRef,System.Object)">
            <summary>
            The create binding.
            </summary>
            <param name="cellRef">
            The cell ref.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.CutExecute(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            The cut execute.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.Delete">
            <summary>
            The delete.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.DeleteExecute(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            The delete execute.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.DeleteRows">
            <summary>
            The delete rows.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.EnumEditorSelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            The enum editor selection changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.EnumerateCells(System.Object,System.String)">
            <summary>
            The enumerate cells.
            </summary>
            <param name="item">
            The item.
            </param>
            <param name="propertyName">
            The property name.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.EnumerateItems(PropertyTools.Wpf.CellRef,PropertyTools.Wpf.CellRef)">
            <summary>
            Enumerate the items in the specified cell range.
              This is used to updated the SelectedItems property.
            </summary>
            <param name="cell0">
            The cell 0.
            </param>
            <param name="cell1">
            The cell 1.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.FindNext(System.Int32@,System.Int32@,System.Int32,System.Int32)">
            <summary>
            The find next.
            </summary>
            <param name="row">
            The row.
            </param>
            <param name="column">
            The column.
            </param>
            <param name="deltaRow">
            The delta row.
            </param>
            <param name="deltaColumn">
            The delta column.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetCellRefFromUIElement(System.Windows.UIElement)">
            <summary>
            The get cell ref from ui element.
            </summary>
            <param name="element">
            The element.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetColumnDefinition(PropertyTools.Wpf.CellRef)">
            <summary>
            The get column definition.
            </summary>
            <param name="cell">
            The cell.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetColumnElement(System.Int32)">
            <summary>
            The get column element.
            </summary>
            <param name="column">
            The column.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetColumnHeader(System.Int32)">
            <summary>
            The get column header.
            </summary>
            <param name="j">
            The j.
            </param>
            <returns>
            The get column header.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetColumnWidth(System.Int32)">
            <summary>
            The get column width.
            </summary>
            <param name="i">
            The i.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetCustomTemplate(System.Type)">
            <summary>
            The get custom template.
            </summary>
            <param name="type">
            The type.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetDataField(PropertyTools.Wpf.CellRef)">
            <summary>
            The get data field.
            </summary>
            <param name="cell">
            The cell.
            </param>
            <returns>
            The get data field.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetDisplayTemplate(System.Type)">
            <summary>
            The get display template.
            </summary>
            <param name="type">
            The type.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetEditTemplate(System.Type)">
            <summary>
            The get edit template.
            </summary>
            <param name="type">
            The type.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetFieldIndex(PropertyTools.Wpf.CellRef)">
            <summary>
            The get field index.
            </summary>
            <param name="cell">
            The cell.
            </param>
            <returns>
            The get field index.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetFormatString(PropertyTools.Wpf.CellRef,System.Object)">
            <summary>
            The get format string.
            </summary>
            <param name="cell">
            The cell.
            </param>
            <param name="value">
            The value.
            </param>
            <returns>
            The get format string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetHorizontalAlignment(PropertyTools.Wpf.CellRef)">
            <summary>
            The get horizontal alignment.
            </summary>
            <param name="cell">
            The cell.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetItem(PropertyTools.Wpf.CellRef)">
            <summary>
            The get item.
            </summary>
            <param name="cell">
            The cell.
            </param>
            <returns>
            The get item.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetItemIndex(PropertyTools.Wpf.CellRef)">
            <summary>
            The get item index.
            </summary>
            <param name="cell">
            The cell.
            </param>
            <returns>
            The get item index.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.GetRowHeader(System.Int32)">
            <summary>
            The get row header.
            </summary>
            <param name="j">
            The j.
            </param>
            <returns>
            The get row header.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.HandleButtonDown(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The handle button down.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.InsertCellElement(PropertyTools.Wpf.CellRef,System.Object,System.Boolean)">
            <summary>
            The insert cell element.
            </summary>
            <param name="cellRef">
            The cell ref.
            </param>
            <param name="value">
            The value.
            </param>
            <param name="insert">
            The insert.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.InsertRows">
            <summary>
            The insert rows.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.IsArray">
            <summary>
            The is array.
            </summary>
            <returns>
            The is array.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.OnContentCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            The on content collection changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.OnContentItemPropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Called when any item in the Content is changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.OpenCombo">
            <summary>
            The open combo.
            </summary>
            <returns>
            The open combo.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.PasteExecute(System.Object,System.Windows.Input.ExecutedRoutedEventArgs)">
            <summary>
            The paste execute.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.RowGridMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The row grid mouse left button down.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.RowGridMouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The row grid mouse left button up.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.RowGridMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            The row grid mouse move.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.RowScrollerChanged(System.Object,System.Windows.Controls.ScrollChangedEventArgs)">
            <summary>
            The row scroller changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.ScrollViewerScrollChanged(System.Object,System.Windows.Controls.ScrollChangedEventArgs)">
            <summary>
            The scroll viewer scroll changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.ScrollViewerSizeChanged(System.Object,System.Windows.SizeChangedEventArgs)">
            <summary>
            The scroll viewer size changed.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.SelectAll">
            <summary>
            The select all.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.SelectionToString(System.String,System.Boolean)">
            <summary>
            The selection to string.
            </summary>
            <param name="separator">
            The separator.
            </param>
            <param name="encode">
            The encode.
            </param>
            <returns>
            The selection to string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.SetCheckInSelectedCells(System.Boolean)">
            <summary>
            The set check in selected cells.
            </summary>
            <param name="value">
            The value.
            </param>
            <returns>
            The set check in selected cells.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.SheetToString(System.String,System.Boolean)">
            <summary>
            The sheet to string.
            </summary>
            <param name="separator">
            The separator.
            </param>
            <param name="encode">
            The encode.
            </param>
            <returns>
            The sheet to string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.SubscribeNotifications">
            <summary>
            The subscribe notifications.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.TextEditorLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            The text editor lost focus.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.TextEditorPreviewKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            The text editor preview key down.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.ToString(PropertyTools.Wpf.CellRef,PropertyTools.Wpf.CellRef,System.String,System.Boolean)">
            <summary>
            The to string.
            </summary>
            <param name="cell1">
            The cell 1.
            </param>
            <param name="cell2">
            The cell 2.
            </param>
            <param name="separator">
            The separator.
            </param>
            <param name="encode">
            The encode.
            </param>
            <returns>
            The to string.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.ToggleCheckInSelectedCells">
            <summary>
            The toggle check in selected cells.
            </summary>
            <returns>
            The toggle check in selected cells.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.TopleftMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The topleft mouse left button down.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.UnsubscribeNotifications">
            <summary>
            The unsubscribe notifications.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.UpdateColumnWidths">
            <summary>
            The update column widths.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.UpdateColumns(System.Int32)">
            <summary>
            The update columns.
            </summary>
            <param name="columns">
            The columns.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.UpdateGridContent">
            <summary>
            Updates all the UIElements of the grid (both cells, headers, row and column lines).
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.UpdateRows(System.Int32)">
            <summary>
            The update rows.
            </summary>
            <param name="rows">
            The rows.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.SimpleGrid.UpdateSheet(System.Int32,System.Int32)">
            <summary>
            The update sheet.
            </summary>
            <param name="rows">
            The rows.
            </param>
            <param name="columns">
            The columns.
            </param>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.AddItemHeader">
            <summary>
              Gets or sets the header used for the add item row/column. Default is "*".
            </summary>
            <value>The add item header.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.AlternatingRowsBackground">
            <summary>
              Gets or sets the alternating rows background brush.
            </summary>
            <value>The alternating rows background.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.AutoFillCell">
            <summary>
              Gets or sets the auto fill cell.
            </summary>
            <value>The auto fill cell.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.AutoGenerateColumns">
            <summary>
              Gets or sets a value indicating whether to auto generate columns.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.AutoSizeColumns">
            <summary>
              Gets or sets a value indicating whether auto size columns is enabled.
            </summary>
            <value><c>true</c> if [auto size columns]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.CanDelete">
            <summary>
              Gets or sets a value indicating whether this instance can delete.
            </summary>
            <value>
              <c>true</c> if this instance can delete; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.CanInsert">
            <summary>
              Gets or sets a value indicating whether this instance can insert.
            </summary>
            <value>
              <c>true</c> if this instance can insert; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.CanResizeColumns">
            <summary>
              Gets or sets a value indicating whether this instance can resize columns.
            </summary>
            <value>
              <c>true</c> if this instance can resize columns; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.ColumnAlignments">
            <summary>
              Sets the column alignments.
            </summary>
            <value>The column alignments.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.ColumnDefinitions">
            <summary>
              Gets the column definitions.
            </summary>
            <value>The column definitions.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.ColumnHeaders">
            <summary>
              Sets the column headers.
            </summary>
            <value>The column headers.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.ColumnWidths">
            <summary>
              Sets the column widths.
            </summary>
            <value>The column widths.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.Content">
            <summary>
              Gets or sets the content of the grid.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.CurrentCell">
            <summary>
              Gets or sets the current cell.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.DataFields">
            <summary>
              Sets DataFields.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.DefaultColumnWidth">
            <summary>
              Gets or sets the default column width.
            </summary>
            <value>The default width of the column.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.DefaultHorizontalAlignment">
            <summary>
              Gets or sets the default horizontal alignment.
            </summary>
            <value>The default horizontal alignment.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.DefaultRowHeight">
            <summary>
              Gets or sets the default height of the row.
            </summary>
            <value>The default height of the row.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.EasyInsert">
            <summary>
              Gets or sets a value indicating whether to allow easy insert mode.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.FormatStrings">
            <summary>
              Sets FormatStrings.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.GridLineBrush">
            <summary>
              Gets or sets the grid line brush.
            </summary>
            <value>The grid line brush.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.HeaderBorderBrush">
            <summary>
              Gets or sets the header border brush.
            </summary>
            <value>The header border brush.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.IsVirtualizing">
            <summary>
              Gets or sets a value indicating whether this control is using UI virtualizing.
              When true, only the UIElements of the visible cells will be created.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.ItemsInColumns">
            <summary>
              Gets or sets a value indicating whether to use columns for the items.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.RowHeaderWidth">
            <summary>
              Gets or sets the width of the row header.
            </summary>
            <value>The width of the row header.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.RowHeaders">
            <summary>
              Gets or sets the row headers.
            </summary>
            <value>The row headers.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.SelectedCells">
            <summary>
              Gets the selected cells.
            </summary>
            <value>The selected cells.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.SelectedItems">
            <summary>
              Gets or sets the selected items.
            </summary>
            <value>The selected items.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.SelectionCell">
            <summary>
              Gets or sets the cell defining the selection area.
              The selection area is defined by the CurrentCell and SelectionCell.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.TypeDefinitions">
            <summary>
              Gets the type definitions.
            </summary>
            <value>The type definitions.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.CanDeleteColumns">
            <summary>
              Gets a value indicating whether this instance can delete columns.
            </summary>
            <value>
              <c>true</c> if this instance can delete columns; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.CanDeleteRows">
            <summary>
              Gets a value indicating whether this instance can delete rows.
            </summary>
            <value>
              <c>true</c> if this instance can delete rows; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.CanInsertColumns">
            <summary>
              Gets a value indicating whether this instance can insert columns.
            </summary>
            <value>
              <c>true</c> if this instance can insert columns; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.CanInsertRows">
            <summary>
              Gets a value indicating whether this instance can insert rows.
            </summary>
            <value>
              <c>true</c> if this instance can insert rows; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.Columns">
            <summary>
              Gets or sets the number of columns.
            </summary>
            <value>The columns.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.Rows">
            <summary>
              Gets or sets the number of rows.
            </summary>
            <value>The rows.</value>
        </member>
        <member name="P:PropertyTools.Wpf.SimpleGrid.UseColumnDefinitions">
            <summary>
              Gets a value indicating whether to use column definitions.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.GridLengthListConverter">
            <summary>
            The grid length list converter.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.GridLengthListConverter.SplitterChars">
            <summary>
              The splitter chars.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.GridLengthListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the type you want to convert from.
            </param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.GridLengthListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.
            </param>
            <param name="value">
            The <see cref="T:System.Object"/> to convert.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed. 
            </exception>
        </member>
        <member name="T:PropertyTools.Wpf.ColumnAlignmentListConverter">
            <summary>
            The column alignment list converter.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.ColumnAlignmentListConverter.SplitterChars">
            <summary>
              The splitter chars.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ColumnAlignmentListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the type you want to convert from.
            </param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ColumnAlignmentListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.
            </param>
            <param name="value">
            The <see cref="T:System.Object"/> to convert.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed. 
            </exception>
        </member>
        <member name="T:PropertyTools.Wpf.ReflectionMath">
            <summary>
            Addtion, subctraction and multiplication for all kinds of objects (by reflection to invoke the operators).
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.ReflectionMath.TryAdd(System.Object,System.Object,System.Object@)">
            <summary>
            Performs addition with the op_Addition operator. A return value indicates whether the addition succeeded or failed.
            </summary>
            <param name="o1">
            The first object.
            </param>
            <param name="o2">
            The second object.
            </param>
            <param name="result">
            The sum.
            </param>
            <returns>
            True if the addition succeeded.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ReflectionMath.TryMultiply(System.Object,System.Object,System.Object@)">
            <summary>
            Performs multiplication with the op_Multiplication operator. A return value indicates whether the addition succeeded or failed.
            </summary>
            <param name="o1">
            The first object.
            </param>
            <param name="o2">
            The second object.
            </param>
            <param name="result">
            The product.
            </param>
            <returns>
            True if the multiplication succeeded.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ReflectionMath.TrySubtract(System.Object,System.Object,System.Object@)">
            <summary>
            Performs subtraction with the op_Subtraction operator. A return value indicates whether the addition succeeded or failed.
            </summary>
            <param name="o1">
            The first object.
            </param>
            <param name="o2">
            The second object.
            </param>
            <param name="result">
            The difference.
            </param>
            <returns>
            True if the subtraction succeeded.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.ReflectionMath.TryInvoke(System.String,System.Object,System.Object,System.Object@)">
            <summary>
            The try invoke.
            </summary>
            <param name="methodName">
            The method name.
            </param>
            <param name="o1">
            The o 1.
            </param>
            <param name="o2">
            The o 2.
            </param>
            <param name="result">
            The result.
            </param>
            <returns>
            The try invoke.
            </returns>
        </member>
        <member name="T:PropertyTools.Wpf.StringListConverter">
            <summary>
            The string list converter.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.StringListConverter.SplitterChars">
            <summary>
              The splitter chars.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.StringListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <summary>
            Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="sourceType">
            A <see cref="T:System.Type"/> that represents the type you want to convert from.
            </param>
            <returns>
            true if this converter can perform the conversion; otherwise, false.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.StringListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <summary>
            Converts the given object to the type of this converter, using the specified context and culture information.
            </summary>
            <param name="context">
            An <see cref="T:System.ComponentModel.ITypeDescriptorContext"/> that provides a format context.
            </param>
            <param name="culture">
            The <see cref="T:System.Globalization.CultureInfo"/> to use as the current culture.
            </param>
            <param name="value">
            The <see cref="T:System.Object"/> to convert.
            </param>
            <returns>
            An <see cref="T:System.Object"/> that represents the converted value.
            </returns>
            <exception cref="T:System.NotSupportedException">
            The conversion cannot be performed. 
            </exception>
        </member>
        <member name="T:PropertyTools.Wpf.TypeDefinition">
            <summary>
            Define formatting and templates for a given type
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TypeDefinition.DisplayTemplate">
            <summary>
              Gets or sets DisplayTemplate.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TypeDefinition.EditTemplate">
            <summary>
              Gets or sets EditTemplate.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TypeDefinition.FormatString">
            <summary>
              Gets or sets FormatString.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TypeDefinition.HorizontalAlignment">
            <summary>
              Gets or sets HorizontalAlignment.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TypeDefinition.Type">
            <summary>
              Gets or sets Type.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.EditableTextBlock">
            <summary>
            Provides an editable text block.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.EditableTextBlock.IsEditingProperty">
            <summary>
              The is editing property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.EditableTextBlock.oldfocus">
            <summary>
              The oldfocus.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.EditableTextBlock.textBox">
            <summary>
              The text box.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.EditableTextBlock.#cctor">
            <summary>
              Initializes static members of the <see cref="T:PropertyTools.Wpf.EditableTextBlock"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.EditableTextBlock.BeginEdit">
            <summary>
            Begins the edit.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.EditableTextBlock.EndEdit(System.Boolean)">
            <summary>
            Ends the edit.
            </summary>
            <param name="commit">
            if set to <c>true</c> [commit].
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.EditableTextBlock.IsEditingChanged">
            <summary>
            Handles changes in IsEditing.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.EditableTextBlock.TextBoxKeyDown(System.Object,System.Windows.Input.KeyEventArgs)">
            <summary>
            TextBox key down handler.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:System.Windows.Input.KeyEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.EditableTextBlock.TextBoxLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            TextBox lost focus handler.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The <see cref="T:System.Windows.RoutedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="P:PropertyTools.Wpf.EditableTextBlock.IsEditing">
            <summary>
              Gets or sets a value indicating whether this instance is editing.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.InsertionAdorner">
            <summary>
            Insertion bar adorner.
            </summary>
            <remarks>
            From http://bea.stollnitz.com/blog/?p=53
            </remarks>
        </member>
        <member name="F:PropertyTools.Wpf.InsertionAdorner.pen">
            <summary>
            The pen.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.InsertionAdorner.triangle">
            <summary>
            The triangle.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.InsertionAdorner.adornerLayer">
            <summary>
            The adorner layer.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.InsertionAdorner.isSeparatorHorizontal">
            <summary>
            The is separator horizontal.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.InsertionAdorner.#cctor">
            <summary>
            Initializes static members of the <see cref="T:PropertyTools.Wpf.InsertionAdorner"/> class. 
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.InsertionAdorner.#ctor(System.Boolean,System.Boolean,System.Windows.UIElement,System.Windows.Documents.AdornerLayer)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.InsertionAdorner"/> class.
            </summary>
            <param name="isSeparatorHorizontal">
            if set to <c>true</c> [is separator horizontal].
            </param>
            <param name="isInFirstHalf">
            if set to <c>true</c> [is in first half].
            </param>
            <param name="adornedElement">
            The adorned element.
            </param>
            <param name="adornerLayer">
            The adorner layer.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.InsertionAdorner.Detach">
            <summary>
            Detaches this instance from the adorner layer.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.InsertionAdorner.OnRender(System.Windows.Media.DrawingContext)">
            <summary>
            When overridden in a derived class, participates in rendering operations that are directed by the layout system. The rendering instructions for this element are not used directly when this method is invoked, and are instead preserved for later asynchronous use by layout and drawing.
            </summary>
            <param name="drawingContext">
            The drawing instructions for a specific element. This context is provided to the layout system.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.InsertionAdorner.CalculateStartAndEndPoint(System.Windows.Point@,System.Windows.Point@)">
            <summary>
            Calculates the start and end point.
            </summary>
            <param name="startPoint">
            The start point.
            </param>
            <param name="endPoint">
            The end point.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.InsertionAdorner.DrawTriangle(System.Windows.Media.DrawingContext,System.Windows.Point,System.Double)">
            <summary>
            Draws the triangle.
            </summary>
            <param name="drawingContext">
            The drawing context.
            </param>
            <param name="origin">
            The origin.
            </param>
            <param name="angle">
            The angle.
            </param>
        </member>
        <member name="P:PropertyTools.Wpf.InsertionAdorner.IsInFirstHalf">
            <summary>
            Gets or sets a value indicating whether IsInFirstHalf.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.LevelToThicknessConverter">
            <summary>
            Converts from level to thickness.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.LevelToThicknessConverter.#ctor">
            <summary>
              Initializes a new instance of the <see cref="T:PropertyTools.Wpf.LevelToThicknessConverter"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.LevelToThicknessConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value produced by the binding source.
            </param>
            <param name="targetType">
            The type of the binding target property.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.LevelToThicknessConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts a value.
            </summary>
            <param name="value">
            The value that is produced by the binding target.
            </param>
            <param name="targetType">
            The type to convert to.
            </param>
            <param name="parameter">
            The converter parameter to use.
            </param>
            <param name="culture">
            The culture to use in the converter.
            </param>
            <returns>
            A converted value. If the method returns null, the valid null value is used.
            </returns>
        </member>
        <member name="P:PropertyTools.Wpf.LevelToThicknessConverter.Indentation">
            <summary>
              Gets or sets the indentation.
            </summary>
            <value>The indentation.</value>
        </member>
        <member name="T:PropertyTools.Wpf.TreeListBox">
            <summary>
            Represents a hierarchical list box.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBox.ChildrenBindingProperty">
            <summary>
              The hierarchy items binding property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBox.IndentationProperty">
            <summary>
              The indentation property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBox.IsExpandedBindingProperty">
            <summary>
              The is expanded binding property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBox.IsSelectedBindingProperty">
            <summary>
              The is selected binding property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBox.TreeSourceProperty">
            <summary>
              The tree source property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBox.parentContainerMap">
            <summary>
              A map from item to parent container. This is used to set the Level property of the item once its container is generated.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.#cctor">
            <summary>
              Initializes static members of the <see cref="T:PropertyTools.Wpf.TreeListBox"/> class.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.OnApplyTemplate">
            <summary>
            When overridden in a derived class, is invoked whenever application code or internal processes call <see cref="M:System.Windows.FrameworkElement.ApplyTemplate"/>.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.ChildCollectionChanged(PropertyTools.Wpf.TreeListBoxItem,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles child collection changes.
            </summary>
            <param name="parent">
            The parent.
            </param>
            <param name="e">
            The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.Collapse(PropertyTools.Wpf.TreeListBoxItem)">
            <summary>
            Collapses the specified item.
            </summary>
            <param name="item">
            The item.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.ContainerFromIndex(System.Int32)">
            <summary>
            Gets the container from and index.
            </summary>
            <param name="index">
            The index.
            </param>
            <returns>
            The container.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.Expand(PropertyTools.Wpf.TreeListBoxItem)">
            <summary>
            Expands the specified item.
            </summary>
            <param name="item">
            The item.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.GetContainerForItemOverride">
            <summary>
            Creates or identifies the element used to display a specified item.
            </summary>
            <returns>
            A <see cref="T:System.Windows.Controls.ListBoxItem"/>.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.IsItemItsOwnContainerOverride(System.Object)">
            <summary>
            Determines if the specified item is (or is eligible to be) its own ItemContainer.
            </summary>
            <param name="item">
            Specified item.
            </param>
            <returns>
            true if the item is its own ItemContainer; otherwise, false.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <summary>
            Responds to the <see cref="E:System.Windows.UIElement.KeyDown"/> event.
            </summary>
            <param name="e">
            Provides data for <see cref="T:System.Windows.Input.KeyEventArgs"/>.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            Raises the <see cref="E:System.Windows.Controls.Control.MouseDoubleClick"/> routed event.
            </summary>
            <param name="e">
            The event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.PrepareContainerForItemOverride(System.Windows.DependencyObject,System.Object)">
            <summary>
            Prepares the specified element to display the specified item.
            </summary>
            <param name="element">
            Element used to display the specified item.
            </param>
            <param name="item">
            Specified item.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.ContainerFromItem(System.Object)">
            <summary>
            Gets the container from an item.
            </summary>
            <param name="item">
            The item.
            </param>
            <returns>
            The container.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.HierarchySourceChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Handles changes in the HierarchySource.
            </summary>
            <param name="e">
            The <see cref="T:System.Windows.DependencyPropertyChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBox.IndentationChanged">
            <summary>
            Handles changes in indentation.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBox.ChildrenBinding">
            <summary>
              Gets or sets the hierarchal items binding.
            </summary>
            <value>The hierarchy items binding.</value>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBox.HierarchySource">
            <summary>
              Gets or sets the hierarchy source.
            </summary>
            <value>
              The hierarchy source.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBox.Indentation">
            <summary>
              Gets or sets the indentation.
            </summary>
            <value>
              The indentation.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBox.IsExpandedBinding">
            <summary>
              Gets or sets the IsExpanded binding.
            </summary>
            <value>The is expanded binding.</value>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBox.IsSelectedBinding">
            <summary>
              Gets or sets the IsSelected binding.
            </summary>
            <value>The is selected binding.</value>
        </member>
        <member name="T:PropertyTools.Wpf.TreeListBoxDragDropHelper">
            <summary>
            Drag/drop helper class for the <see cref="T:PropertyTools.Wpf.TreeListBox"/>.
            </summary>
            <remarks>
            Based on http://bea.stollnitz.com/blog/?p=53
            </remarks>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.DragDropTemplateProperty">
            <summary>
            The drag drop template property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.IsDragSourceProperty">
            <summary>
            The is drag source property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.IsDropTargetProperty">
            <summary>
            The is drop target property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.format">
            <summary>
            The format.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.instance">
            <summary>
            The instance.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.draggedData">
            <summary>
            The dragged data.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.dropPosition">
            <summary>
            The drop position.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.hasVerticalOrientation">
            <summary>
            The has vertical orientation.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.initialMousePosition">
            <summary>
            The initial mouse position.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.insertionAdorner">
            <summary>
            The insertion adorner.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.isInFirstHalf">
            <summary>
            The is in first half.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.sourceItemContainer">
            <summary>
            The source item container.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.sourceItemsControl">
            <summary>
            The source items control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.targetItemContainer">
            <summary>
            The target item container.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.targetItemsControl">
            <summary>
            The target items control.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxDragDropHelper.topWindow">
            <summary>
            The top window.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.GetDragDropTemplate(System.Windows.DependencyObject)">
            <summary>
            The get drag drop template.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.GetIsDragSource(System.Windows.DependencyObject)">
            <summary>
            The get is drag source.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The get is drag source.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.GetIsDropTarget(System.Windows.DependencyObject)">
            <summary>
            The get is drop target.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <returns>
            The get is drop target.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.GetRelativePosition(System.Windows.FrameworkElement,System.Windows.Point,System.Boolean)">
            <summary>
            The get relative position.
            </summary>
            <param name="container">
            The container.
            </param>
            <param name="clickedPoint">
            The clicked point.
            </param>
            <param name="hasVerticalOrientation">
            The has vertical orientation.
            </param>
            <returns>
            The get relative position.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.IsMovementBigEnough(System.Windows.Point,System.Windows.Point)">
            <summary>
            The is movement big enough.
            </summary>
            <param name="initialMousePosition">
            The initial mouse position.
            </param>
            <param name="currentPosition">
            The current position.
            </param>
            <returns>
            The is movement big enough.
            </returns>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.SetDragDropTemplate(System.Windows.DependencyObject,System.Windows.DataTemplate)">
            <summary>
            The set drag drop template.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.SetIsDragSource(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            The set is drag source.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.SetIsDropTarget(System.Windows.DependencyObject,System.Boolean)">
            <summary>
            The set is drop target.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <param name="value">
            The value.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.IsDragSourceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The is drag source changed.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.IsDropTargetChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The is drop target changed.
            </summary>
            <param name="obj">
            The obj.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.CreateOrUpdateInsertionAdorner">
            <summary>
            The create or update insertion adorner.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.DecideDropTarget(System.Windows.DragEventArgs)">
            <summary>
            The decide drop target.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.DragSource_PreviewMouseLeftButtonDown(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The drag source_ preview mouse left button down.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.DragSource_PreviewMouseLeftButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
            <summary>
            The drag source_ preview mouse left button up.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.DragSource_PreviewMouseMove(System.Object,System.Windows.Input.MouseEventArgs)">
            <summary>
            The drag source_ preview mouse move.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.DropTarget_PreviewDragEnter(System.Object,System.Windows.DragEventArgs)">
            <summary>
            The drop target_ preview drag enter.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.DropTarget_PreviewDragLeave(System.Object,System.Windows.DragEventArgs)">
            <summary>
            The drop target_ preview drag leave.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.DropTarget_PreviewDragOver(System.Object,System.Windows.DragEventArgs)">
            <summary>
            The drop target_ preview drag over.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.DropTarget_PreviewDrop(System.Object,System.Windows.DragEventArgs)">
            <summary>
            The drop target_ preview drop.
            </summary>
            <param name="sender">
            The sender.
            </param>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.RemoveAdorners">
            <summary>
            The remove adorners.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.RemoveInsertionAdorner">
            <summary>
            The remove insertion adorner.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxDragDropHelper.UpdateAdorner">
            <summary>
            The update adorner.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBoxDragDropHelper.Instance">
            <summary>
              Gets the instance singleton.
            </summary>
        </member>
        <member name="T:PropertyTools.Wpf.TreeListBoxItem">
            <summary>
            Represents a container for items in the <see cref="T:PropertyTools.Wpf.TreeListBox"/>.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxItem.ChildrenProperty">
            <summary>
              The children property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxItem.HasItemsProperty">
            <summary>
              The has items property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxItem.IsDropTargetProperty">
            <summary>
              The is drop target property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxItem.IsExpandedProperty">
            <summary>
              The is expanded property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxItem.LevelProperty">
            <summary>
              The level property.
            </summary>
        </member>
        <member name="F:PropertyTools.Wpf.TreeListBoxItem.collectionChangedHandler">
            <summary>
              The handler.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxItem.#ctor(PropertyTools.Wpf.TreeListBox)">
            <summary>
            Initializes a new instance of the <see cref="T:PropertyTools.Wpf.TreeListBoxItem"/> class.
            </summary>
            <param name="owner">
            The owner.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxItem.ChildrenChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The children changed.
            </summary>
            <param name="e">
            The e.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxItem.IsExpandedChanged">
            <summary>
            Handles IsExpanded changes.
            </summary>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxItem.SubscribeForCollectionChanges(PropertyTools.Wpf.TreeListBoxItem,System.Collections.IEnumerable)">
            <summary>
            The subscribe for collection changes.
            </summary>
            <param name="parent">
            The parent.
            </param>
            <param name="collection">
            The collection.
            </param>
        </member>
        <member name="M:PropertyTools.Wpf.TreeListBoxItem.UnsubscribeCollectionChanges(System.Collections.IEnumerable)">
            <summary>
            The unsubscribe collection changes.
            </summary>
            <param name="collection">
            The collection.
            </param>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBoxItem.Children">
            <summary>
              Gets or sets the child items.
            </summary>
            <value>
              The children.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBoxItem.HasItems">
            <summary>
              Gets or sets a value indicating whether this item has child items.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBoxItem.IsDropTarget">
            <summary>
              Gets or sets a value indicating whether this instance should preview as a drop target.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBoxItem.IsExpanded">
            <summary>
              Gets or sets a value indicating whether this instance is expanded.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBoxItem.Level">
            <summary>
              Gets or sets the hierarchy level of the item.
            </summary>
            <value>
              The level.
            </value>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBoxItem.Owner">
            <summary>
              Gets the owner listbox.
            </summary>
        </member>
        <member name="P:PropertyTools.Wpf.TreeListBoxItem.ParentItem">
            <summary>
              Gets the parent item.
            </summary>
        </member>
    </members>
</doc>
